{"version":3,"file":"BestFiveFromSeven-BNXSNSzr.js","sources":["../../src/games/foundation/BestFiveFromSeven.ts"],"sourcesContent":["/**\n * Best Five from Seven - Select the best 5-card hand from 7 cards\n */\n\nimport { BaseGame } from '../BaseGame.js';\nimport type { GameScenario, GameConfig } from '../../types/games';\nimport * as Cards from '../../lib/cards.js';\nimport * as Random from '../../lib/random.js';\nimport { findBestHand, getHandDescription } from '../../lib/pokersolver-wrapper.js';\n\ninterface BestFiveScenario extends GameScenario {\n  allCards: string[];\n  bestHand: string[];\n  handName: string;\n  possibleHands: string[][];\n}\n\nexport class BestFiveFromSeven extends BaseGame {\n  protected containerId: string = 'game-container';\n  protected scenarios: BestFiveScenario[] = [];\n  // Override base class currentScenario with more specific type\n  protected declare currentScenario: GameScenario | null;\n  private selectedCards: Set<string> = new Set();\n\n  constructor(config: Partial<GameConfig> = {}) {\n    super({\n      name: 'Best Five from Seven',\n      difficulty: 'foundation',\n      rounds: 10,\n      timeLimit: 45,\n      description: 'Select the best 5-card hand from 7 cards',\n      instructions: ['Look at all 7 cards', 'Click to select 5 cards', 'Submit your selection'],\n      ...config\n    });\n  }\n\n  protected generateScenarios(): GameScenario[] {\n    const scenarios: BestFiveScenario[] = [];\n    \n    // Use seeded random for consistent games\n    Random.setSeed(Random.getHourlySeed() + 100);\n\n    // Ensure variety of hand types (not used currently)\n    // const _targetHands = [\n    //   'straight-flush', 'four-of-a-kind', 'full-house', \n    //   'flush', 'straight', 'three-of-a-kind',\n    //   'two-pair', 'pair', 'high-card', 'flush'\n    // ];\n\n    for (let i = 0; i < this.config.rounds; i++) {\n      let scenario: BestFiveScenario | null = null;\n      let attempts = 0;\n      \n      while (!scenario && attempts < 100) {\n        attempts++;\n        \n        // Generate 7 cards (like Texas Hold'em)\n        const deck = Cards.generateDeck({ shuffled: true });\n        const sevenCards = deck.slice(0, 7);\n        \n        // Find the best 5-card hand from the 7 cards using pokersolver\n        const bestHandResult = findBestHand(sevenCards);\n        \n        // Skip if hand is too weak (high card) after first few rounds\n        if (bestHandResult.description.includes('High Card') && i > 3) continue;\n        \n        scenario = {\n          id: `bf7-${i}`,\n          allCards: sevenCards,\n          bestHand: bestHandResult.cards,\n          handName: bestHandResult.description,\n          possibleHands: [], // Not used anymore\n          choices: [], // Will be the cards themselves\n          correctAnswer: bestHandResult.cards.sort().join(','),\n          explanation: `The best hand is ${bestHandResult.description}`\n        };\n      }\n      \n      if (scenario) {\n        scenarios.push(scenario);\n      }\n    }\n    \n    this.scenarios = scenarios;\n    return scenarios;\n  }\n\n  protected renderScenario(): void {\n    const scenario = this.scenarios[this.state.currentRound - 1] as BestFiveScenario;\n    if (!scenario) return;\n    \n    this.currentScenario = scenario;\n    this.selectedCards.clear();\n    \n    const gameArea = this.uiManager.getGameArea();\n    if (!gameArea) return;\n    \n    gameArea.innerHTML = `\n      <div class=\"instructions\">\n        Select the best 5-card poker hand from these 7 cards\n      </div>\n      \n      <div class=\"seven-cards\" id=\"seven-cards\"></div>\n      \n      <div class=\"selection-info\">\n        <span id=\"cards-selected\">0</span> / 5 cards selected\n      </div>\n      \n      <div class=\"action-buttons\">\n        <button id=\"clear-btn\" class=\"action-btn secondary\">Clear Selection</button>\n        <button id=\"submit-btn\" class=\"action-btn primary\" disabled>Submit Hand</button>\n      </div>\n      \n      <div id=\"selected-display\" class=\"selected-hand\"></div>\n    `;\n    \n    // Render clickable cards\n    const cardsContainer = document.getElementById('seven-cards');\n    if (cardsContainer) {\n      scenario.allCards.forEach((card, _index) => {\n        const cardEl = Cards.createCardElement(card, {\n          width: 85,\n          height: 120,\n          clickable: true,\n          onClick: () => this.toggleCard(card)\n        });\n        cardEl.dataset.cardValue = card;\n        cardsContainer.appendChild(cardEl);\n      });\n    }\n    \n    // Add event listeners\n    const clearBtn = document.getElementById('clear-btn');\n    const submitBtn = document.getElementById('submit-btn');\n    \n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => this.clearSelection());\n    }\n    \n    if (submitBtn) {\n      submitBtn.addEventListener('click', () => this.submitSelection());\n    }\n  }\n\n  private toggleCard(card: string): void {\n    if (this.selectedCards.has(card)) {\n      this.selectedCards.delete(card);\n    } else if (this.selectedCards.size < 5) {\n      this.selectedCards.add(card);\n    }\n    \n    this.updateSelection();\n  }\n\n  private clearSelection(): void {\n    this.selectedCards.clear();\n    this.updateSelection();\n  }\n\n  private updateSelection(): void {\n    // Update card visuals\n    const allCards = document.querySelectorAll('.seven-cards .card');\n    allCards.forEach(cardEl => {\n      const cardValue = (cardEl as HTMLElement).dataset.cardValue;\n      if (cardValue && this.selectedCards.has(cardValue)) {\n        cardEl.classList.add('selected');\n      } else {\n        cardEl.classList.remove('selected');\n      }\n    });\n    \n    // Update counter\n    const counter = document.getElementById('cards-selected');\n    if (counter) {\n      counter.textContent = this.selectedCards.size.toString();\n    }\n    \n    // Update submit button\n    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;\n    if (submitBtn) {\n      submitBtn.disabled = this.selectedCards.size !== 5;\n    }\n    \n    // Show selected hand\n    const display = document.getElementById('selected-display');\n    if (display && this.selectedCards.size === 5) {\n      const selectedArray = Array.from(this.selectedCards);\n      const description = getHandDescription(selectedArray);\n      display.innerHTML = `\n        <div class=\"selected-label\">Your selection:</div>\n        <div class=\"selected-hand-name\">${description}</div>\n      `;\n    } else if (display) {\n      display.innerHTML = '';\n    }\n  }\n\n  private submitSelection(): void {\n    if (!this.currentScenario || this.selectedCards.size !== 5) return;\n    \n    const selectedArray = Array.from(this.selectedCards).sort();\n    const scenario = this.currentScenario as unknown as BestFiveScenario;\n    const correctArray = scenario?.bestHand.sort() || [];\n    \n    const isCorrect = selectedArray.join(',') === correctArray.join(',');\n    \n    this.handleAnswer(isCorrect ? 'correct' : 'incorrect');\n  }\n\n  protected handleAnswer(answerId: string): void {\n    // Use the base class submitAnswer method\n    this.submitAnswer(answerId);\n  }\n\n  private showFeedback(isCorrect: boolean): void {\n    if (!this.currentScenario) return;\n    \n    const gameArea = this.uiManager.getGameArea();\n    if (!gameArea) return;\n    \n    // Disable interaction\n    const allCards = gameArea.querySelectorAll('.card');\n    allCards.forEach(card => {\n      (card as HTMLElement).style.pointerEvents = 'none';\n    });\n    \n    const buttons = gameArea.querySelectorAll('button');\n    buttons.forEach(btn => {\n      (btn as HTMLButtonElement).disabled = true;\n    });\n    \n    // Highlight correct answer\n    allCards.forEach(cardEl => {\n      const cardValue = (cardEl as HTMLElement).dataset.cardValue;\n      const scenario = this.currentScenario as unknown as BestFiveScenario;\n      if (cardValue && scenario?.bestHand.includes(cardValue)) {\n        cardEl.classList.add('correct-answer');\n      }\n    });\n    \n    // Show result\n    const feedbackDiv = document.createElement('div');\n    feedbackDiv.className = `feedback ${isCorrect ? 'correct' : 'incorrect'}`;\n    feedbackDiv.innerHTML = `\n      <div class=\"feedback-icon\">${isCorrect ? '✓' : '✗'}</div>\n      <div class=\"feedback-text\">\n        ${isCorrect ? 'Correct!' : 'Not quite.'}<br>\n        The best hand was: <strong>${(this.currentScenario as unknown as BestFiveScenario).handName}</strong>\n      </div>\n    `;\n    \n    gameArea.appendChild(feedbackDiv);\n  }\n  \n  protected renderGame(): void {\n    // Add the BestFiveFromSeven specific styles\n    this.addStyles();\n  }\n  \n  private addStyles(): void {\n    if (document.getElementById('best-five-styles')) return;\n    \n    const style = document.createElement('style');\n    style.id = 'best-five-styles';\n    style.textContent = getBestFiveStyles();\n    document.head.appendChild(style);\n  }\n  \n  protected checkAnswer(userAnswer: any, correctAnswer: any): boolean {\n    // Compare the selected cards with the best hand\n    if (typeof userAnswer === 'string' && userAnswer === 'correct') {\n      return true;\n    }\n    return userAnswer === correctAnswer;\n  }\n  \n  protected handleAnswerFeedback(isCorrect: boolean, _answer: any): void {\n    this.showFeedback(isCorrect);\n  }\n  \n  getInstructions(): string {\n    return \"Select the best possible 5-card poker hand from the 7 cards shown. Click cards to select them.\";\n  }\n}\n\n// Add styles\nexport function getBestFiveStyles(): string {\n  return `\n    .instructions {\n      text-align: center;\n      font-size: 1.2em;\n      color: #333;\n      margin-bottom: 30px;\n      font-weight: 600;\n    }\n    \n    .seven-cards {\n      display: flex;\n      justify-content: center;\n      gap: 10px;\n      margin: 30px 0;\n      flex-wrap: wrap;\n    }\n    \n    .seven-cards .card {\n      transition: all 0.3s;\n      cursor: pointer;\n    }\n    \n    .seven-cards .card:hover {\n      transform: translateY(-10px);\n    }\n    \n    .seven-cards .card.selected {\n      transform: translateY(-20px);\n      box-shadow: 0 10px 30px rgba(199, 62, 154, 0.4);\n      border-color: #C73E9A;\n      border-width: 3px;\n    }\n    \n    .seven-cards .card.correct-answer {\n      border-color: #4CAF50;\n      border-width: 4px;\n      box-shadow: 0 10px 30px rgba(76, 175, 80, 0.4);\n    }\n    \n    .selection-info {\n      text-align: center;\n      font-size: 1.1em;\n      margin: 20px 0;\n      color: #666;\n    }\n    \n    #cards-selected {\n      font-weight: bold;\n      color: #C73E9A;\n      font-size: 1.2em;\n    }\n    \n    .action-buttons {\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n      margin: 20px 0;\n    }\n    \n    .action-btn {\n      padding: 12px 30px;\n      font-size: 1.1em;\n      border-radius: 8px;\n      border: 2px solid;\n      cursor: pointer;\n      transition: all 0.3s;\n      font-weight: 600;\n    }\n    \n    .action-btn.primary {\n      background: #C73E9A;\n      color: white;\n      border-color: #C73E9A;\n    }\n    \n    .action-btn.primary:hover:not(:disabled) {\n      background: #932153;\n      border-color: #932153;\n      transform: translateY(-2px);\n    }\n    \n    .action-btn.primary:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n    \n    .action-btn.secondary {\n      background: white;\n      color: #666;\n      border-color: #ddd;\n    }\n    \n    .action-btn.secondary:hover {\n      background: #f5f5f5;\n      transform: translateY(-2px);\n    }\n    \n    .selected-hand {\n      text-align: center;\n      margin: 20px 0;\n      min-height: 50px;\n    }\n    \n    .selected-label {\n      color: #666;\n      font-size: 0.9em;\n      margin-bottom: 5px;\n    }\n    \n    .selected-hand-name {\n      font-size: 1.3em;\n      font-weight: bold;\n      color: #7D1346;\n    }\n    \n    .feedback {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: white;\n      padding: 30px;\n      border-radius: 15px;\n      box-shadow: 0 10px 40px rgba(0,0,0,0.3);\n      text-align: center;\n      z-index: 100;\n    }\n    \n    .feedback-icon {\n      font-size: 3em;\n      margin-bottom: 10px;\n    }\n    \n    .feedback.correct .feedback-icon {\n      color: #4CAF50;\n    }\n    \n    .feedback.incorrect .feedback-icon {\n      color: #F44336;\n    }\n    \n    .feedback-text {\n      font-size: 1.1em;\n      color: #333;\n    }\n    \n    @media (max-width: 768px) {\n      .seven-cards .card {\n        width: 60px !important;\n        height: 85px !important;\n      }\n    }\n  `;\n}"],"names":["BestFiveFromSeven","BaseGame","constructor","config","super","name","difficulty","rounds","timeLimit","description","instructions","this","containerId","scenarios","selectedCards","Set","generateScenarios","Random.setSeed","Random.getHourlySeed","i","scenario","attempts","sevenCards","Cards.generateDeck","shuffled","slice","bestHandResult","findBestHand","includes","id","allCards","bestHand","cards","handName","possibleHands","choices","correctAnswer","sort","join","explanation","push","renderScenario","state","currentRound","currentScenario","clear","gameArea","uiManager","getGameArea","innerHTML","cardsContainer","document","getElementById","forEach","card","_index","cardEl","Cards.createCardElement","width","height","clickable","onClick","toggleCard","dataset","cardValue","appendChild","clearBtn","submitBtn","addEventListener","clearSelection","submitSelection","has","delete","size","add","updateSelection","querySelectorAll","classList","remove","counter","textContent","toString","disabled","display","selectedArray","Array","from","getHandDescription","correctArray","isCorrect","handleAnswer","answerId","submitAnswer","showFeedback","style","pointerEvents","btn","feedbackDiv","createElement","className","renderGame","addStyles","getBestFiveStyles","head","checkAnswer","userAnswer","handleAnswerFeedback","_answer","getInstructions"],"mappings":"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"}