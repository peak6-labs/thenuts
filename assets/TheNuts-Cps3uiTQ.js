import{B as e,b as n,g as t,s,m as r}from"./BaseGame-DXEyezz4.js";import{g as i,s as a,f as o,r as d}from"./main-BNzdIAgl.js";import{a as l,f as c}from"./pokersolver-wrapper-RbdFFWZ_.js";class h extends e{constructor(e="level1"){super({name:"The Nuts",difficulty:"advanced",rounds:15,timeLimit:"level3"===e?30:60,description:"Identify the absolute best possible hand",instructions:["Look at the community cards","Find which hole cards make the nuts","Level 1: Hints show what each choice makes","Level 2: No hints, standard difficulty","Level 3: Very close hands, 30-second timer","Get 15/15 correct to advance levels"]}),this.currentLevel="level1",this.currentLevel=e,n()}shouldUseSeed(){return!0}getSeed(){const e="level1"===this.currentLevel?0:"level2"===this.currentLevel?1e3:2e3;return t(e)}generateScenarios(){const e=[],n=i({shuffled:!1});for(let t=0;t<this.config.rounds;t++){const t=this.generateLevelScenario(n);e.push(t)}return e}generateLevelScenario(e){switch(this.currentLevel){case"level1":return this.generateLevel1Scenario(e);case"level2":default:return this.generateLevel2Scenario(e);case"level3":return this.generateLevel3Scenario(e)}}generateLevel1Scenario(e){const n=a(e),t=n.slice(0,5),r=n.slice(5),i=this.findTheNuts(t,r),d=[{id:"nuts",display:o(i.holeCards),value:i.holeCards,holeCards:i.holeCards,handStrength:100,hint:`(Makes: ${i.description})`}],l=[70,40,10];for(const s of l){const e=this.generateDecoyHand(t,r,s,d.map(e=>e.holeCards));d.push({id:`decoy-${s}`,display:o(e.holeCards),value:e.holeCards,holeCards:e.holeCards,handStrength:s,hint:`(Makes: ${e.description})`})}return{id:`level1-round-${this.state.currentRound}`,communityCards:{flop:[t[0],t[1],t[2]],turn:t[3],river:t[4]},choices:s(d),correctAnswer:i.holeCards.join(",")}}generateLevel2Scenario(e){const n=a(e),t=n.slice(0,5),r=n.slice(5),i=this.findTheNuts(t,r),d=[{id:"nuts",display:o(i.holeCards),value:i.holeCards,holeCards:i.holeCards,handStrength:100}],l=[80,60,40];for(const s of l){const e=this.generateDecoyHand(t,r,s,d.map(e=>e.holeCards));d.push({id:`decoy-${s}`,display:o(e.holeCards),value:e.holeCards,holeCards:e.holeCards,handStrength:s})}return{id:`level2-round-${this.state.currentRound}`,communityCards:{flop:[t[0],t[1],t[2]],turn:t[3],river:t[4]},choices:s(d),correctAnswer:i.holeCards.join(",")}}generateLevel3Scenario(e){const n=a(e),t=n.slice(0,5),r=n.slice(5),i=this.findTheNuts(t,r),d=[{id:"nuts",display:o(i.holeCards),value:i.holeCards,holeCards:i.holeCards,handStrength:100}],l=[95,92,90];for(const s of l){const e=this.generateDecoyHand(t,r,s,d.map(e=>e.holeCards));d.push({id:`decoy-${s}`,display:o(e.holeCards),value:e.holeCards,holeCards:e.holeCards,handStrength:s})}return{id:`level3-round-${this.state.currentRound}`,communityCards:{flop:[t[0],t[1],t[2]],turn:t[3],river:t[4]},choices:s(d),correctAnswer:i.holeCards.join(",")}}findTheNuts(e,n){return l(e,n)}generateDecoyHand(e,n,t,s){const r=n.filter(e=>!s.some(n=>n.includes(e))),i=[];for(let o=0;o<Math.min(r.length-1,20);o++)for(let n=o+1;n<Math.min(r.length,21);n++){const t=[r[o],r[n]],s=[...e,...t],a=c(s),d=this.estimateHandStrength(a.description);i.push({holeCards:t,description:a.description,strength:d})}i.sort((e,n)=>Math.abs(e.strength-t)-Math.abs(n.strength-t));const a=i[0]||{holeCards:[r[0],r[1]],description:"High Card"};return{holeCards:a.holeCards,description:a.description}}estimateHandStrength(e){const n=e.toLowerCase();return n.includes("straight flush")?99:n.includes("four of a kind")?95:n.includes("full house")?90:n.includes("flush")?85:n.includes("straight")?80:n.includes("three of a kind")?70:n.includes("two pair")?60:n.includes("pair")?40:20}renderScenario(){if(!this.currentScenario)return;const e=this.uiManager.getGameArea();if(!e)return;const n=[];if(this.currentScenario.communityCards){const{flop:e,turn:t,river:s}=this.currentScenario.communityCards;e&&n.push(...e),t&&n.push(t),s&&n.push(s)}e.innerHTML=`\n      <div class="level-indicator">\n        <span class="level-badge">${this.currentLevel.toUpperCase()}</span>\n        <span class="round-info">Round ${this.state.currentRound}/${this.state.totalRounds}</span>\n      </div>\n      \n      <div class="board-section">\n        <h3>Community Cards</h3>\n        <div class="community-cards" id="community-cards"></div>\n      </div>\n      \n      <div class="question">\n        <p>What is the nuts? (The best possible hand ANY player could have)</p>\n      </div>\n      \n      <div class="choices-grid" id="choices-grid"></div>\n      \n      <div class="feedback" id="feedback" style="display: none;"></div>\n    `,d(n,e.querySelector("#community-cards"));const t=e.querySelector("#choices-grid");if(t&&this.currentScenario.choices)for(const s of this.currentScenario.choices){const e=document.createElement("button");e.className="hole-cards-btn choice-btn",e.innerHTML=`\n          <div class="hole-cards-display">${s.display}</div>\n          ${s.hint?`<div class="hint">${s.hint}</div>`:""}\n        `,e.addEventListener("click",()=>{this.submitAnswer(s.value)}),t.appendChild(e)}this.addStyles()}renderGame(){}checkAnswer(e,n){const t=e,s=n.split(",");return t[0]===s[0]&&t[1]===s[1]||t[0]===s[1]&&t[1]===s[0]}handleAnswerFeedback(e,n){const t=this.uiManager.getGameArea(),s=t?.querySelectorAll(".hole-cards-btn");if(s?.forEach(e=>{e.disabled=!0}),!e&&(this.state.mistakes++,this.state.mistakes>0&&"level1"!==this.currentLevel))return void this.handleLevelFailure();const r=t?.querySelector("#feedback");r&&(r.style.display="block",r.className="feedback "+(e?"correct":"incorrect"),r.textContent=e?"✓ Correct!":"✗ Incorrect")}handleLevelFailure(){this.endGame()}endGame(){15===this.state.score&&(r(`the-nuts-${this.currentLevel}`),"level1"===this.currentLevel?this.currentLevel="level2":"level2"===this.currentLevel&&(this.currentLevel="level3")),super.endGame()}addStyles(){if(document.getElementById("the-nuts-styles"))return;const e=document.createElement("style");e.id="the-nuts-styles",e.textContent="\n      .level-indicator {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 20px;\n      }\n      \n      .level-badge {\n        background: #C73E9A;\n        color: white;\n        padding: 5px 15px;\n        border-radius: 20px;\n        font-weight: bold;\n      }\n      \n      .board-section {\n        text-align: center;\n        margin: 30px 0;\n      }\n      \n      .community-cards {\n        display: flex;\n        justify-content: center;\n        gap: 10px;\n        margin: 20px 0;\n      }\n      \n      .question {\n        text-align: center;\n        font-size: 1.1em;\n        color: #666;\n        margin: 20px 0;\n      }\n      \n      .choices-grid {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        gap: 15px;\n        max-width: 500px;\n        margin: 0 auto;\n      }\n      \n      .hole-cards-btn {\n        padding: 15px;\n        border: 2px solid #C73E9A;\n        border-radius: 10px;\n        background: white;\n        cursor: pointer;\n        transition: all 0.3s;\n      }\n      \n      .hole-cards-btn:hover:not(:disabled) {\n        transform: translateY(-3px);\n        box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n      }\n      \n      .hole-cards-display {\n        font-size: 1.3em;\n        font-weight: bold;\n        color: #333;\n      }\n      \n      .hint {\n        font-size: 0.9em;\n        color: #666;\n        margin-top: 5px;\n      }\n      \n      @media (max-width: 600px) {\n        .choices-grid {\n          grid-template-columns: 1fr;\n        }\n      }\n    ",document.head.appendChild(e)}}export{h as TheNuts};
//# sourceMappingURL=TheNuts-Cps3uiTQ.js.map
