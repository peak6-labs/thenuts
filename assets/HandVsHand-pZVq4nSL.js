import{B as n,a as e,g as t}from"./BaseGame-sCkLoj0v.js";import{g as i,r as a}from"./main-DEXK9nnN.js";import{g as o,c as s}from"./pokersolver-wrapper-RbdFFWZ_.js";class r extends n{constructor(n={}){super({name:"Hand vs Hand",difficulty:"foundation",rounds:10,timeLimit:30,description:"Compare two poker hands and determine the winner",instructions:["Look at both hands","Determine which hand wins","Select your answer"],...n}),this.containerId="game-container",this.scenarios=[]}generateScenarios(){const n=[],a=new Set;e(t());for(let e=0;e<this.config.rounds;e++){let t=null,r=0;for(;!t&&r<50;){r++;const n=i({shuffled:!0}),d=n.slice(0,5),c=n.slice(5,10),h=o(d),l=o(c),p=`${h}-${l}`;if(a.has(p))continue;let u,b;a.add(p);const m=s(d,c);m>0?(u="hand1",b=`${h} beats ${l}`):m<0?(u="hand2",b=`${l} beats ${h}`):(u="tie",b=`Both hands are ${h} - it's a tie!`),t={id:`hvh-${e}`,hand1:d,hand2:c,winner:u,choices:[{id:"hand1",display:"Hand 1 wins"},{id:"hand2",display:"Hand 2 wins"},{id:"tie",display:"It's a tie"}],correctAnswer:u,explanation:b}}t&&n.push(t)}return this.scenarios=n,n}renderScenario(){const n=this.scenarios[this.state.currentRound-1];if(!n)return;this.currentScenario=n;const e=this.uiManager.getGameArea();if(!e)return;e.innerHTML='\n      <div class="hands-comparison">\n        <div class="hand-display">\n          <h3>Hand 1</h3>\n          <div class="cards-row" id="hand1-cards"></div>\n        </div>\n        \n        <div class="vs-divider">VS</div>\n        \n        <div class="hand-display">\n          <h3>Hand 2</h3>\n          <div class="cards-row" id="hand2-cards"></div>\n        </div>\n      </div>\n      \n      <div class="question">Which hand wins?</div>\n      \n      <div class="choice-buttons">\n        <button class="choice-btn" data-choice="hand1">Hand 1 Wins</button>\n        <button class="choice-btn" data-choice="tie">It\'s a Tie</button>\n        <button class="choice-btn" data-choice="hand2">Hand 2 Wins</button>\n      </div>\n    ',a(n.hand1,"hand1-cards",{width:90,height:130}),a(n.hand2,"hand2-cards",{width:90,height:130});e.querySelectorAll(".choice-btn").forEach(n=>{n.addEventListener("click",()=>{const e=n.getAttribute("data-choice");e&&this.handleAnswer(e)})})}handleAnswer(n){this.submitAnswer(n)}showFeedback(n,e,t,i){const a=this.uiManager.getGameArea();if(!a)return;a.querySelectorAll(".choice-btn").forEach(i=>{const a=i;a.disabled=!0;const o=a.getAttribute("data-choice");o===t?(a.style.background="#4CAF50",a.style.color="white",a.style.borderColor="#4CAF50"):o!==e||n||(a.style.background="#F44336",a.style.color="white",a.style.borderColor="#F44336")});const o=document.createElement("div");o.className="result-message",o.style.cssText=`\n      text-align: center;\n      margin-top: 20px;\n      padding: 15px;\n      background: ${n?"#E8F5E9":"#FFEBEE"};\n      border-radius: 8px;\n      border: 2px solid ${n?"#4CAF50":"#F44336"};\n    `,o.innerHTML=`\n      <div style="font-size: 2em; margin-bottom: 10px;">${n?"✓ Correct!":"✗ Incorrect"}</div>\n      <div style="font-size: 1.1em; color: #333;">${i}</div>\n    `;const s=a.querySelector(".choice-buttons");s&&s.parentNode&&s.parentNode.insertBefore(o,s.nextSibling)}renderGame(){this.addStyles()}addStyles(){if(document.getElementById("hand-vs-hand-styles"))return;const n=document.createElement("style");n.id="hand-vs-hand-styles",n.textContent=d(),document.head.appendChild(n)}checkAnswer(n,e){return n===e}handleAnswerFeedback(n,e){const t=this.currentScenario;t&&this.showFeedback(n,e,t.winner,t.explanation||"")}getInstructions(){return"Compare two poker hands and determine which one wins. Remember the hand rankings!"}}function d(){return"\n    .hands-comparison {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      gap: 40px;\n      margin: 30px 0;\n      flex-wrap: wrap;\n    }\n    \n    .hand-display {\n      text-align: center;\n    }\n    \n    .hand-display h3 {\n      color: #7D1346;\n      margin-bottom: 15px;\n    }\n    \n    .cards-row {\n      display: flex;\n      justify-content: center;\n      gap: 5px;\n    }\n    \n    .vs-divider {\n      font-size: 2em;\n      font-weight: bold;\n      color: #C73E9A;\n      padding: 0 20px;\n    }\n    \n    .question {\n      text-align: center;\n      font-size: 1.3em;\n      margin: 20px 0;\n      color: #333;\n      font-weight: 600;\n    }\n    \n    .choice-buttons {\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n      margin-top: 30px;\n      flex-wrap: wrap;\n    }\n    \n    .choice-btn {\n      padding: 15px 30px;\n      font-size: 1.1em;\n      background: white;\n      border: 2px solid #C73E9A;\n      border-radius: 8px;\n      color: #C73E9A;\n      cursor: pointer;\n      transition: all 0.3s;\n      font-weight: 600;\n    }\n    \n    .choice-btn:hover:not(:disabled) {\n      background: #C73E9A;\n      color: white;\n      transform: translateY(-2px);\n    }\n    \n    .choice-btn:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n    \n    .feedback {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: white;\n      padding: 30px;\n      border-radius: 15px;\n      box-shadow: 0 10px 40px rgba(0,0,0,0.3);\n      text-align: center;\n      z-index: 100;\n    }\n    \n    .feedback-icon {\n      font-size: 3em;\n      margin-bottom: 10px;\n    }\n    \n    .feedback.correct .feedback-icon {\n      color: #4CAF50;\n    }\n    \n    .feedback.incorrect .feedback-icon {\n      color: #F44336;\n    }\n    \n    .feedback-text {\n      font-size: 1.2em;\n      color: #333;\n      font-weight: 600;\n    }\n    \n    @media (max-width: 768px) {\n      .hands-comparison {\n        flex-direction: column;\n        gap: 20px;\n      }\n      \n      .vs-divider {\n        padding: 10px 0;\n      }\n    }\n  "}export{r as HandVsHand,d as getHandVsHandStyles};
//# sourceMappingURL=HandVsHand-pZVq4nSL.js.map
