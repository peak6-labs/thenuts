{"version":3,"file":"BaseGame-DXEyezz4.js","sources":["../../src/lib/game-state-manager.ts","../../src/lib/storage.ts","../../src/lib/game-results-manager.ts","../../src/components/Timer.ts","../../src/components/ScoreDisplay.ts","../../src/components/Modal.ts","../../src/lib/theme.ts","../../src/lib/game-ui-manager.ts","../../src/lib/random.ts","../../src/games/BaseGame.ts"],"sourcesContent":["/**\n * Game State Manager\n * Handles game state logic separately from BaseGame\n */\n\nimport type { GameState, GameConfig } from '../types/games.js';\n\nexport class GameStateManager {\n  private state: GameState;\n  private readonly config: GameConfig;\n  \n  constructor(config: GameConfig) {\n    this.config = config;\n    this.state = this.createInitialState();\n  }\n  \n  private createInitialState(): GameState {\n    return {\n      currentRound: 0,\n      totalRounds: this.config.rounds,\n      score: 0,\n      streak: 0,\n      bestStreak: 0,\n      timeRemaining: this.config.timeLimit,\n      isComplete: false,\n      isPaused: false,\n      mistakes: 0\n    };\n  }\n  \n  getState(): GameState {\n    return { ...this.state };\n  }\n  \n  setState(updates: Partial<GameState>): void {\n    this.state = { ...this.state, ...updates };\n  }\n  \n  reset(): void {\n    this.state = this.createInitialState();\n  }\n  \n  // Round management\n  nextRound(): boolean {\n    if (this.state.currentRound >= this.state.totalRounds) {\n      this.state.isComplete = true;\n      return false;\n    }\n    this.state.currentRound++;\n    return true;\n  }\n  \n  // Score management\n  incrementScore(): void {\n    this.state.score++;\n    this.state.streak++;\n    this.state.bestStreak = Math.max(this.state.bestStreak, this.state.streak);\n  }\n  \n  recordMistake(): void {\n    this.state.mistakes++;\n    this.state.streak = 0;\n  }\n  \n  // Pause management\n  pause(): void {\n    this.state.isPaused = true;\n  }\n  \n  resume(): void {\n    this.state.isPaused = false;\n  }\n  \n  // Game completion\n  complete(): void {\n    this.state.isComplete = true;\n  }\n  \n  isComplete(): boolean {\n    return this.state.isComplete;\n  }\n  \n  isPaused(): boolean {\n    return this.state.isPaused;\n  }\n  \n  // Serialization for router\n  serialize(): GameState {\n    return { ...this.state };\n  }\n  \n  deserialize(state: GameState): void {\n    this.state = { ...state };\n  }\n}","/**\n * Local storage utilities for game data persistence\n */\n\nimport type { HighScore, GameProgress } from '../types/games.js';\n\nconst STORAGE_PREFIX = 'poker-training-';\n\n/**\n * Storage keys for different data types\n */\nexport const StorageKeys = {\n  HIGH_SCORES: `${STORAGE_PREFIX}high-scores`,\n  GAME_PROGRESS: `${STORAGE_PREFIX}game-progress`,\n  SETTINGS: `${STORAGE_PREFIX}settings`,\n  ACHIEVEMENTS: `${STORAGE_PREFIX}achievements`,\n  COMPLETED_LEVELS: `${STORAGE_PREFIX}completed-levels`,\n  DAILY_CHALLENGES: `${STORAGE_PREFIX}daily-challenges`\n} as const;\n\n/**\n * Check if localStorage is available\n */\nexport function isStorageAvailable(): boolean {\n  try {\n    const testKey = '__localStorage_test__';\n    localStorage.setItem(testKey, 'test');\n    localStorage.removeItem(testKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get item from localStorage with type safety\n */\nexport function getStorageItem<T>(key: string, defaultValue: T): T {\n  if (!isStorageAvailable()) return defaultValue;\n  \n  try {\n    const item = localStorage.getItem(key);\n    if (item === null) return defaultValue;\n    return JSON.parse(item) as T;\n  } catch (error) {\n    console.error(`Error reading from localStorage:`, error);\n    return defaultValue;\n  }\n}\n\n/**\n * Set item in localStorage\n */\nexport function setStorageItem<T>(key: string, value: T): boolean {\n  if (!isStorageAvailable()) return false;\n  \n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n    return true;\n  } catch (error) {\n    console.error(`Error writing to localStorage:`, error);\n    return false;\n  }\n}\n\n/**\n * Remove item from localStorage\n */\nexport function removeStorageItem(key: string): boolean {\n  if (!isStorageAvailable()) return false;\n  \n  try {\n    localStorage.removeItem(key);\n    return true;\n  } catch (error) {\n    console.error(`Error removing from localStorage:`, error);\n    return false;\n  }\n}\n\n/**\n * Clear all game data from localStorage\n */\nexport function clearAllGameData(): boolean {\n  if (!isStorageAvailable()) return false;\n  \n  try {\n    const keys = Object.keys(localStorage);\n    keys.forEach(key => {\n      if (key.startsWith(STORAGE_PREFIX)) {\n        localStorage.removeItem(key);\n      }\n    });\n    return true;\n  } catch (error) {\n    console.error(`Error clearing localStorage:`, error);\n    return false;\n  }\n}\n\n/**\n * Get high scores for all games\n */\nexport function getHighScores(): Record<string, HighScore> {\n  return getStorageItem(StorageKeys.HIGH_SCORES, {});\n}\n\n/**\n * Get high score for a specific game\n */\nexport function getHighScore(gameName: string): HighScore | null {\n  const scores = getHighScores();\n  return scores[gameName] || null;\n}\n\n/**\n * Save high score for a game\n */\nexport function saveHighScore(gameName: string, score: HighScore): boolean {\n  const scores = getHighScores();\n  scores[gameName] = score;\n  return setStorageItem(StorageKeys.HIGH_SCORES, scores);\n}\n\n/**\n * Check if a score is a new high score\n */\nexport function isNewHighScore(gameName: string, score: number): boolean {\n  const currentHigh = getHighScore(gameName);\n  return !currentHigh || score > currentHigh.score;\n}\n\n/**\n * Get game progress\n */\nexport function getGameProgress(): GameProgress {\n  return getStorageItem(StorageKeys.GAME_PROGRESS, {\n    gamesPlayed: {},\n    highScores: {},\n    achievements: [],\n    totalPlayTime: 0\n  });\n}\n\n/**\n * Update game progress\n */\nexport function updateGameProgress(updates: Partial<GameProgress>): boolean {\n  const progress = getGameProgress();\n  const updated = { ...progress, ...updates };\n  return setStorageItem(StorageKeys.GAME_PROGRESS, updated);\n}\n\n/**\n * Increment games played counter\n */\nexport function incrementGamesPlayed(gameName: string): void {\n  const progress = getGameProgress();\n  progress.gamesPlayed[gameName] = (progress.gamesPlayed[gameName] || 0) + 1;\n  setStorageItem(StorageKeys.GAME_PROGRESS, progress);\n}\n\n/**\n * Get completed levels\n */\nexport function getCompletedLevels(): Set<string> {\n  const levels = getStorageItem<string[]>(StorageKeys.COMPLETED_LEVELS, []);\n  return new Set(levels);\n}\n\n/**\n * Mark level as completed\n */\nexport function markLevelCompleted(levelId: string): boolean {\n  const completed = getCompletedLevels();\n  completed.add(levelId);\n  return setStorageItem(StorageKeys.COMPLETED_LEVELS, Array.from(completed));\n}\n\n/**\n * Check if level is completed\n */\nexport function isLevelCompleted(levelId: string): boolean {\n  const completed = getCompletedLevels();\n  return completed.has(levelId);\n}\n\n/**\n * Get game settings\n */\nexport function getSettings(): Record<string, any> {\n  return getStorageItem(StorageKeys.SETTINGS, {\n    soundEnabled: true,\n    musicEnabled: true,\n    timerWarnings: true,\n    autoAdvance: true,\n    difficulty: 'normal'\n  });\n}\n\n/**\n * Update settings\n */\nexport function updateSettings(settings: Record<string, any>): boolean {\n  const current = getSettings();\n  const updated = { ...current, ...settings };\n  return setStorageItem(StorageKeys.SETTINGS, updated);\n}\n\n/**\n * Get a specific setting value\n */\nexport function getSetting<T>(key: string, defaultValue: T): T {\n  const settings = getSettings();\n  return settings[key] !== undefined ? settings[key] : defaultValue;\n}\n\n/**\n * Set a specific setting value\n */\nexport function setSetting(key: string, value: any): boolean {\n  const settings = getSettings();\n  settings[key] = value;\n  return setStorageItem(StorageKeys.SETTINGS, settings);\n}\n\n/**\n * Export all game data as JSON\n */\nexport function exportGameData(): string {\n  const data = {\n    highScores: getHighScores(),\n    progress: getGameProgress(),\n    completedLevels: Array.from(getCompletedLevels()),\n    settings: getSettings(),\n    exportDate: new Date().toISOString()\n  };\n  return JSON.stringify(data, null, 2);\n}\n\n/**\n * Import game data from JSON\n */\nexport function importGameData(jsonData: string): boolean {\n  try {\n    const data = JSON.parse(jsonData);\n    \n    if (data.highScores) {\n      setStorageItem(StorageKeys.HIGH_SCORES, data.highScores);\n    }\n    if (data.progress) {\n      setStorageItem(StorageKeys.GAME_PROGRESS, data.progress);\n    }\n    if (data.completedLevels) {\n      setStorageItem(StorageKeys.COMPLETED_LEVELS, data.completedLevels);\n    }\n    if (data.settings) {\n      setStorageItem(StorageKeys.SETTINGS, data.settings);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error importing game data:', error);\n    return false;\n  }\n}","/**\n * Game Results Manager\n * Handles scoring, results, and high scores\n */\n\nimport type { GameResult, GameState } from '../types/games.js';\nimport { saveHighScore, isNewHighScore, incrementGamesPlayed } from './storage.js';\n\nexport class GameResultsManager {\n  private answers: Array<{\n    answer: any;\n    isCorrect: boolean;\n    timestamp: number;\n    timeToAnswer?: number;\n  }> = [];\n  \n  private startTime: number = 0;\n  private gameName: string;\n  \n  constructor(gameName: string) {\n    this.gameName = gameName;\n  }\n  \n  startTracking(): void {\n    this.startTime = Date.now();\n    this.answers = [];\n  }\n  \n  recordAnswer(answer: any, isCorrect: boolean, timeToAnswer?: number): void {\n    this.answers.push({\n      answer,\n      isCorrect,\n      timestamp: Date.now(),\n      timeToAnswer\n    });\n  }\n  \n  getAnswers() {\n    return [...this.answers];\n  }\n  \n  calculateResult(state: GameState): GameResult {\n    const timeElapsed = Math.floor((Date.now() - this.startTime) / 1000);\n    \n    return {\n      score: state.score,\n      totalRounds: state.totalRounds,\n      accuracy: state.totalRounds > 0 ? state.score / state.totalRounds : 0,\n      timeElapsed,\n      bestStreak: state.bestStreak,\n      mistakes: state.mistakes\n    };\n  }\n  \n  saveIfHighScore(state: GameState): boolean {\n    const result = this.calculateResult(state);\n    \n    if (isNewHighScore(this.gameName, result.score)) {\n      saveHighScore(this.gameName, {\n        game: this.gameName,\n        score: result.score,\n        accuracy: result.accuracy,\n        date: new Date().toISOString(),\n        timeElapsed: result.timeElapsed\n      });\n      return true;\n    }\n    return false;\n  }\n  \n  recordGamePlayed(): void {\n    incrementGamesPlayed(this.gameName);\n  }\n  \n  formatTime(seconds: number): string {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  }\n  \n  getAccuracyPercent(result: GameResult): number {\n    return Math.round(result.accuracy * 100);\n  }\n  \n  reset(): void {\n    this.answers = [];\n    this.startTime = 0;\n  }\n  \n  // Serialization support\n  serialize() {\n    return {\n      answers: this.answers,\n      startTime: this.startTime\n    };\n  }\n  \n  deserialize(data: { answers: any[], startTime: number }) {\n    this.answers = data.answers || [];\n    this.startTime = data.startTime || 0;\n  }\n}","/**\n * Reusable timer component for games\n */\n\nimport type { TimerOptions } from '../types/ui.js';\n\nexport class Timer {\n  private duration: number;\n  private remaining: number;\n  private startTime: number = 0;\n  private intervalId: number | null = null;\n  private isPaused: boolean = false;\n  private pausedElapsedTime: number = 0;\n  private pauseStartTime: number | null = null;\n  private element: HTMLElement | null = null;\n  private options: TimerOptions;\n\n  constructor(options: TimerOptions) {\n    this.options = {\n      format: 'seconds',\n      showWarning: true,\n      warningThreshold: 10,\n      allowPause: false,\n      ...options\n    };\n    \n    this.duration = options.duration;\n    this.remaining = options.duration;\n  }\n\n  /**\n   * Attach timer to a DOM element for display\n   */\n  attachTo(element: HTMLElement | string): void {\n    this.element = typeof element === 'string' \n      ? document.getElementById(element) \n      : element;\n      \n    if (this.element && this.options.allowPause) {\n      this.element.style.cursor = 'pointer';\n      this.element.title = 'Click to pause/unpause';\n      this.element.addEventListener('click', () => this.toggle());\n    }\n    \n    this.updateDisplay();\n  }\n\n  /**\n   * Start the timer\n   */\n  start(): void {\n    if (this.intervalId) return;\n    \n    this.startTime = Date.now();\n    this.intervalId = window.setInterval(() => this.tick(), 100);\n    this.updateDisplay();\n  }\n\n  /**\n   * Stop the timer\n   */\n  stop(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  /**\n   * Pause the timer\n   */\n  pause(): void {\n    if (!this.isPaused && this.intervalId) {\n      this.isPaused = true;\n      this.pauseStartTime = Date.now();\n      this.stop();\n      \n      if (this.element) {\n        this.element.classList.add('paused');\n      }\n      \n      this.updateDisplay();\n    }\n  }\n\n  /**\n   * Resume the timer\n   */\n  resume(): void {\n    if (this.isPaused) {\n      this.isPaused = false;\n      \n      if (this.pauseStartTime) {\n        this.pausedElapsedTime += Date.now() - this.pauseStartTime;\n        this.pauseStartTime = null;\n      }\n      \n      if (this.element) {\n        this.element.classList.remove('paused');\n      }\n      \n      this.start();\n    }\n  }\n\n  /**\n   * Toggle between pause and resume\n   */\n  toggle(): void {\n    if (this.isPaused) {\n      this.resume();\n    } else {\n      this.pause();\n    }\n  }\n\n  /**\n   * Reset the timer\n   */\n  reset(): void {\n    this.stop();\n    this.remaining = this.duration;\n    this.isPaused = false;\n    this.pausedElapsedTime = 0;\n    this.pauseStartTime = null;\n    this.startTime = 0;\n    \n    if (this.element) {\n      this.element.classList.remove('paused', 'warning', 'expired');\n    }\n    \n    this.updateDisplay();\n  }\n\n  /**\n   * Get remaining time in seconds\n   */\n  getRemaining(): number {\n    return Math.max(0, this.remaining);\n  }\n\n  /**\n   * Get elapsed time in seconds\n   */\n  getElapsed(): number {\n    if (!this.startTime) return 0;\n    \n    const now = this.isPaused && this.pauseStartTime ? this.pauseStartTime : Date.now();\n    // Return elapsed time with decimal precision for smoother countdown\n    return (now - this.startTime - this.pausedElapsedTime) / 1000;\n  }\n\n  /**\n   * Check if timer has expired\n   */\n  isExpired(): boolean {\n    return this.remaining <= 0;\n  }\n\n  /**\n   * Internal tick function\n   */\n  private tick(): void {\n    const elapsed = this.getElapsed();\n    this.remaining = Math.max(0, this.duration - elapsed);\n    \n    if (this.options.onTick) {\n      this.options.onTick(this.remaining);\n    }\n    \n    this.updateDisplay();\n    \n    if (this.remaining <= 0) {\n      this.stop();\n      if (this.element) {\n        this.element.classList.add('expired');\n      }\n      if (this.options.onComplete) {\n        this.options.onComplete();\n      }\n    }\n  }\n\n  /**\n   * Update the display element\n   */\n  private updateDisplay(): void {\n    if (!this.element) return;\n    \n    const displayText = this.formatTime(this.remaining);\n    const pauseIndicator = this.isPaused ? ' ⏸' : '';\n    \n    this.element.textContent = displayText + pauseIndicator;\n    \n    // Add warning class if threshold reached\n    if (this.options.showWarning && \n        this.remaining <= this.options.warningThreshold! && \n        this.remaining > 0) {\n      this.element.classList.add('warning');\n    } else {\n      this.element.classList.remove('warning');\n    }\n  }\n\n  /**\n   * Format time for display\n   */\n  private formatTime(seconds: number): string {\n    if (this.options.format === 'mm:ss') {\n      const mins = Math.floor(seconds / 60);\n      const secs = seconds % 60;\n      return `${mins}:${secs.toString().padStart(2, '0')}`;\n    } else {\n      return seconds.toFixed(1) + 's';\n    }\n  }\n\n  /**\n   * Destroy the timer\n   */\n  destroy(): void {\n    this.stop();\n    if (this.element) {\n      this.element.classList.remove('paused', 'warning', 'expired');\n      if (this.options.allowPause) {\n        this.element.style.cursor = '';\n        this.element.title = '';\n      }\n    }\n  }\n  \n  /**\n   * Set the remaining time (for restoring state)\n   */\n  setTimeRemaining(seconds: number): void {\n    this.remaining = seconds;\n    this.duration = seconds;\n    this.updateDisplay();\n  }\n}\n\n/**\n * Inject timer styles into document\n */\nexport function injectTimerStyles(): void {\n  if (document.getElementById('timer-default-styles')) return;\n  \n  const style = document.createElement('style');\n  style.id = 'timer-default-styles';\n  style.textContent = getTimerStyles();\n  document.head.appendChild(style);\n}\n\n/**\n * Default timer styles\n */\nexport function getTimerStyles(): string {\n  return `\n    .timer-display {\n      font-size: 22px;\n      font-weight: 700;\n      color: #333;\n      min-width: 70px;\n      display: inline-block;\n      text-align: center;\n      background: #f0f0f0;\n      padding: 5px 10px;\n      border-radius: 20px;\n      transition: background 0.3s, color 0.3s;\n    }\n    \n    .timer-display.warning {\n      background: #FFEBEE;\n      color: #D32F2F;\n      animation: pulse 1s infinite;\n    }\n    \n    .timer-display.expired {\n      background: #D32F2F;\n      color: white;\n    }\n    \n    .timer-display.paused {\n      background: #FFE0B2;\n      color: #E65100;\n      animation: pulse 1.5s infinite;\n    }\n    \n    @keyframes pulse {\n      0% { opacity: 1; }\n      50% { opacity: 0.7; }\n      100% { opacity: 1; }\n    }\n  `;\n}","/**\n * Score display component for games\n */\n\nimport type { ScoreDisplayOptions } from '../types/ui.js';\n\nexport class ScoreDisplay {\n  private element: HTMLElement;\n  private options: ScoreDisplayOptions;\n\n  constructor(options: ScoreDisplayOptions) {\n    this.options = {\n      showStreak: false,\n      showAccuracy: false,\n      ...options\n    };\n    \n    this.element = this.createElement();\n    this.update();  // Initialize the display\n  }\n\n  private createElement(): HTMLElement {\n    const container = document.createElement('div');\n    container.className = `score-display ${this.options.className || ''}`;\n    \n    return container;\n  }\n\n  update(updates?: Partial<ScoreDisplayOptions>): void {\n    if (updates) {\n      this.options = { ...this.options, ...updates };\n    }\n    \n    const parts: string[] = [\n      `<span class=\"score-current\">${this.options.current}</span>`,\n      '/',\n      `<span class=\"score-total\">${this.options.total}</span>`\n    ];\n    \n    if (this.options.showStreak && this.options.streak !== undefined) {\n      parts.push(`<span class=\"score-streak\">Streak: ${this.options.streak}</span>`);\n    }\n    \n    if (this.options.showAccuracy && this.options.accuracy !== undefined) {\n      const accuracyPercent = Math.round(this.options.accuracy * 100);\n      parts.push(`<span class=\"score-accuracy\">${accuracyPercent}%</span>`);\n    }\n    \n    if (this.element) {\n      this.element.innerHTML = parts.join(' ');\n    }\n  }\n\n  incrementScore(): void {\n    this.options.current++;\n    if (this.options.streak !== undefined) {\n      this.options.streak++;\n    }\n    this.updateAccuracy();\n    this.update();\n  }\n\n  resetStreak(): void {\n    if (this.options.streak !== undefined) {\n      this.options.streak = 0;\n      this.update();\n    }\n  }\n\n  private updateAccuracy(): void {\n    if (this.options.showAccuracy && this.options.total > 0) {\n      this.options.accuracy = this.options.current / this.options.total;\n    }\n  }\n\n  attachTo(parent: HTMLElement | string): void {\n    const parentEl = typeof parent === 'string' \n      ? document.getElementById(parent) \n      : parent;\n      \n    if (parentEl) {\n      parentEl.appendChild(this.element);\n    } else if (typeof parent === 'object' && parent) {\n      // If parent is an HTMLElement but not in DOM yet\n      parent.appendChild(this.element);\n    }\n  }\n\n  getElement(): HTMLElement {\n    return this.element;\n  }\n\n  reset(): void {\n    this.options.current = 0;\n    this.options.streak = 0;\n    this.options.accuracy = 0;\n    this.update();\n  }\n\n  destroy(): void {\n    if (this.element.parentNode) {\n      this.element.parentNode.removeChild(this.element);\n    }\n  }\n}\n\n/**\n * Inject score display styles into document\n */\nexport function injectScoreDisplayStyles(): void {\n  if (document.getElementById('score-display-default-styles')) return;\n  \n  const style = document.createElement('style');\n  style.id = 'score-display-default-styles';\n  style.textContent = getScoreDisplayStyles();\n  document.head.appendChild(style);\n}\n\n/**\n * Default score display styles\n */\nexport function getScoreDisplayStyles(): string {\n  return `\n    .score-display {\n      font-size: 18px;\n      font-weight: 600;\n      color: #333;\n      display: inline-flex;\n      align-items: center;\n      gap: 10px;\n      background: #f8f8f8;\n      padding: 8px 15px;\n      border-radius: 20px;\n    }\n    \n    .score-current {\n      color: #C73E9A;\n      font-size: 1.1em;\n    }\n    \n    .score-total {\n      color: #666;\n    }\n    \n    .score-streak {\n      margin-left: 10px;\n      padding-left: 10px;\n      border-left: 2px solid #ddd;\n      color: #7D1346;\n    }\n    \n    .score-accuracy {\n      margin-left: 10px;\n      padding-left: 10px;\n      border-left: 2px solid #ddd;\n      color: #666;\n    }\n  `;\n}","/**\n * Reusable modal component\n */\n\nimport type { ModalOptions, ModalButton } from '../types/ui.js';\n\nexport class Modal {\n  private container: HTMLElement;\n  private backdrop: HTMLElement;\n  private options: ModalOptions;\n  private isOpen: boolean = false;\n\n  constructor(options: ModalOptions) {\n    this.options = {\n      closeOnBackdrop: true,\n      closeOnEscape: true,\n      ...options\n    };\n    \n    this.container = this.createModalStructure();\n    this.backdrop = this.container.querySelector('.modal-backdrop')!;\n    \n    this.setupEventListeners();\n  }\n\n  private createModalStructure(): HTMLElement {\n    const container = document.createElement('div');\n    container.className = `modal ${this.options.className || ''}`;\n    container.innerHTML = `\n      <div class=\"modal-backdrop\"></div>\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h2 class=\"modal-title\">${this.options.title}</h2>\n          <button class=\"modal-close\" aria-label=\"Close\">&times;</button>\n        </div>\n        <div class=\"modal-body\"></div>\n        <div class=\"modal-footer\"></div>\n      </div>\n    `;\n    \n    // Set content\n    const body = container.querySelector('.modal-body')!;\n    if (typeof this.options.content === 'string') {\n      body.innerHTML = this.options.content;\n    } else {\n      body.appendChild(this.options.content);\n    }\n    \n    // Add buttons\n    if (this.options.buttons && this.options.buttons.length > 0) {\n      const footer = container.querySelector('.modal-footer')!;\n      this.options.buttons.forEach(btn => {\n        const button = this.createButton(btn);\n        footer.appendChild(button);\n      });\n    } else {\n      container.querySelector('.modal-footer')!.remove();\n    }\n    \n    return container;\n  }\n\n  private createButton(buttonConfig: ModalButton): HTMLElement {\n    const button = document.createElement('button');\n    button.textContent = buttonConfig.text;\n    button.className = `modal-button ${buttonConfig.className || ''} ${buttonConfig.isPrimary ? 'primary' : ''}`;\n    button.addEventListener('click', () => {\n      buttonConfig.onClick();\n      if (!buttonConfig.className?.includes('no-close')) {\n        this.close();\n      }\n    });\n    return button;\n  }\n\n  private setupEventListeners(): void {\n    // Close button\n    const closeBtn = this.container.querySelector('.modal-close');\n    if (closeBtn) {\n      closeBtn.addEventListener('click', () => this.close());\n    }\n    \n    // Backdrop click\n    if (this.options.closeOnBackdrop) {\n      this.backdrop.addEventListener('click', () => this.close());\n    }\n    \n    // Escape key\n    if (this.options.closeOnEscape) {\n      this.handleEscape = this.handleEscape.bind(this);\n    }\n  }\n\n  private handleEscape(event: KeyboardEvent): void {\n    if (event.key === 'Escape' && this.isOpen) {\n      this.close();\n    }\n  }\n\n  open(): void {\n    if (this.isOpen) return;\n    \n    // Remove any existing modals first\n    const existingModals = document.querySelectorAll('.modal');\n    existingModals.forEach(modal => {\n      if (modal.parentNode) {\n        modal.parentNode.removeChild(modal);\n      }\n    });\n    \n    document.body.appendChild(this.container);\n    \n    // Force reflow for animation\n    this.container.offsetHeight;\n    \n    this.container.classList.add('active');\n    this.isOpen = true;\n    \n    if (this.options.closeOnEscape) {\n      document.addEventListener('keydown', this.handleEscape);\n    }\n    \n    if (this.options.onOpen) {\n      this.options.onOpen();\n    }\n  }\n\n  close(): void {\n    if (!this.isOpen) return;\n    \n    this.container.classList.remove('active');\n    this.isOpen = false;\n    \n    if (this.options.closeOnEscape) {\n      document.removeEventListener('keydown', this.handleEscape);\n    }\n    \n    setTimeout(() => {\n      if (this.container.parentNode) {\n        this.container.parentNode.removeChild(this.container);\n      }\n    }, 300); // Wait for animation\n    \n    if (this.options.onClose) {\n      this.options.onClose();\n    }\n  }\n\n  setContent(content: string | HTMLElement): void {\n    const body = this.container.querySelector('.modal-body')!;\n    if (typeof content === 'string') {\n      body.innerHTML = content;\n    } else {\n      body.innerHTML = '';\n      body.appendChild(content);\n    }\n  }\n\n  destroy(): void {\n    this.close();\n    if (this.options.closeOnEscape) {\n      document.removeEventListener('keydown', this.handleEscape);\n    }\n  }\n\n  static confirm(\n    title: string, \n    message: string, \n    onConfirm: () => void, \n    onCancel?: () => void\n  ): Modal {\n    const modal = new Modal({\n      title,\n      content: message,\n      buttons: [\n        {\n          text: 'Cancel',\n          onClick: () => {\n            if (onCancel) onCancel();\n          }\n        },\n        {\n          text: 'Confirm',\n          onClick: onConfirm,\n          isPrimary: true\n        }\n      ]\n    });\n    \n    modal.open();\n    return modal;\n  }\n\n  static alert(title: string, message: string, onClose?: () => void): Modal {\n    const modal = new Modal({\n      title,\n      content: message,\n      buttons: [\n        {\n          text: 'OK',\n          onClick: () => {\n            if (onClose) onClose();\n          },\n          isPrimary: true\n        }\n      ]\n    });\n    \n    modal.open();\n    return modal;\n  }\n}\n\n/**\n * Inject modal styles into document\n */\nexport function injectModalStyles(): void {\n  if (document.getElementById('modal-default-styles')) return;\n  \n  const style = document.createElement('style');\n  style.id = 'modal-default-styles';\n  style.textContent = getModalStyles();\n  document.head.appendChild(style);\n}\n\n/**\n * Default modal styles\n */\nexport function getModalStyles(): string {\n  return `\n    .modal {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      z-index: 9999;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      opacity: 0;\n      visibility: hidden;\n      transition: opacity 0.3s, visibility 0.3s;\n    }\n    \n    .modal.active {\n      opacity: 1;\n      visibility: visible;\n    }\n    \n    .modal-backdrop {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.5);\n    }\n    \n    .modal-content {\n      position: relative;\n      background: white;\n      border-radius: 12px;\n      max-width: 500px;\n      width: 90%;\n      max-height: 90vh;\n      overflow: auto;\n      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);\n      transform: scale(0.9);\n      transition: transform 0.3s;\n    }\n    \n    .modal.active .modal-content {\n      transform: scale(1);\n    }\n    \n    .modal-header {\n      padding: 20px;\n      border-bottom: 1px solid #e0e0e0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    \n    .modal-title {\n      margin: 0;\n      font-size: 1.5em;\n      color: #333;\n    }\n    \n    .modal-close {\n      background: none;\n      border: none;\n      font-size: 28px;\n      cursor: pointer;\n      color: #999;\n      line-height: 1;\n      padding: 0;\n      width: 30px;\n      height: 30px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    \n    .modal-close:hover {\n      color: #333;\n    }\n    \n    .modal-body {\n      padding: 20px;\n    }\n    \n    .modal-footer {\n      padding: 20px;\n      border-top: 1px solid #e0e0e0;\n      display: flex;\n      justify-content: flex-end;\n      gap: 10px;\n    }\n    \n    .modal-button {\n      padding: 10px 20px;\n      border: 1px solid #ddd;\n      border-radius: 6px;\n      background: white;\n      cursor: pointer;\n      font-size: 14px;\n      transition: all 0.2s;\n    }\n    \n    .modal-button:hover {\n      background: #f5f5f5;\n    }\n    \n    .modal-button.primary {\n      background: #C73E9A;\n      color: white;\n      border-color: #C73E9A;\n    }\n    \n    .modal-button.primary:hover {\n      background: #932153;\n      border-color: #932153;\n    }\n  `;\n}","/**\n * Shared theme and styles for Poker Power branding\n */\n\nexport const THEME = {\n  colors: {\n    primary: '#7D1346',\n    primaryDark: '#4a0e2d',\n    secondary: '#C73E9A',\n    secondaryLight: '#FF6EC7',\n    accent: '#ffb3d9',\n    text: '#333',\n    textLight: '#666',\n    white: '#ffffff',\n    background: 'linear-gradient(135deg, #7D1346 0%, #4a0e2d 100%)',\n    buttonGradient: 'linear-gradient(135deg, #FF6EC7 0%, #C73E9A 100%)',\n    buttonHover: 'linear-gradient(135deg, #C73E9A 0%, #FF6EC7 100%)'\n  }\n};\n\nexport function injectGameStyles(): void {\n  if (document.getElementById('game-theme-styles')) return;\n  \n  const style = document.createElement('style');\n  style.id = 'game-theme-styles';\n  style.textContent = getGameStyles();\n  document.head.appendChild(style);\n}\n\nexport function showLoadingScreen(container: HTMLElement, message: string = 'Loading game...'): void {\n  container.innerHTML = `\n    <div class=\"game-loading\">\n      <div class=\"loading-spinner\">\n        <div class=\"loading-card\"></div>\n        <div class=\"loading-card\"></div>\n        <div class=\"loading-card\"></div>\n        <div class=\"loading-card\"></div>\n      </div>\n      <div class=\"loading-text\">${message}</div>\n      <div class=\"loading-subtext\">Shuffling the deck...</div>\n    </div>\n  `;\n}\n\nexport function getGameStyles(): string {\n  return `\n    /* Loading screen styles */\n    .game-loading {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      min-height: 400px;\n      color: ${THEME.colors.primary};\n    }\n    \n    .loading-spinner {\n      width: 80px;\n      height: 80px;\n      margin-bottom: 20px;\n      position: relative;\n    }\n    \n    .loading-card {\n      position: absolute;\n      width: 40px;\n      height: 56px;\n      background: linear-gradient(135deg, ${THEME.colors.secondary}, ${THEME.colors.secondaryLight});\n      border-radius: 4px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n      animation: shuffleCards 2s infinite ease-in-out;\n    }\n    \n    .loading-card:nth-child(1) {\n      animation-delay: 0s;\n      transform-origin: center bottom;\n    }\n    \n    .loading-card:nth-child(2) {\n      animation-delay: 0.2s;\n      transform-origin: center bottom;\n    }\n    \n    .loading-card:nth-child(3) {\n      animation-delay: 0.4s;\n      transform-origin: center bottom;\n    }\n    \n    .loading-card:nth-child(4) {\n      animation-delay: 0.6s;\n      transform-origin: center bottom;\n    }\n    \n    @keyframes shuffleCards {\n      0%, 100% {\n        transform: rotate(0deg) translateX(0);\n        opacity: 0.8;\n      }\n      25% {\n        transform: rotate(-15deg) translateX(-20px);\n        opacity: 1;\n      }\n      50% {\n        transform: rotate(0deg) translateX(0) translateY(-10px);\n        opacity: 1;\n      }\n      75% {\n        transform: rotate(15deg) translateX(20px);\n        opacity: 1;\n      }\n    }\n    \n    .loading-text {\n      font-size: 24px;\n      font-weight: 600;\n      margin-bottom: 10px;\n      animation: pulse 1.5s infinite ease-in-out;\n    }\n    \n    .loading-subtext {\n      font-size: 14px;\n      color: ${THEME.colors.textLight};\n      animation: fadeInOut 2s infinite ease-in-out;\n    }\n    \n    @keyframes pulse {\n      0%, 100% {\n        opacity: 0.8;\n      }\n      50% {\n        opacity: 1;\n      }\n    }\n    \n    @keyframes fadeInOut {\n      0%, 100% {\n        opacity: 0.5;\n      }\n      50% {\n        opacity: 1;\n      }\n    }\n    \n    /* Game container styles */\n    .game-container {\n      background: white;\n      border-radius: 12px;\n      padding: 20px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    }\n    \n    /* Choice buttons with Poker Power colors */\n    .choice-btn {\n      background: ${THEME.colors.buttonGradient};\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      margin: 5px;\n      border-radius: 8px;\n      font-size: 16px;\n      font-weight: 600;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    \n    .choice-btn:hover:not(:disabled) {\n      background: ${THEME.colors.buttonHover};\n      transform: translateY(-2px);\n      box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n    }\n    \n    .choice-btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n      transform: none;\n    }\n    \n    .choice-btn.correct {\n      background: linear-gradient(135deg, #4caf50, #66bb6a);\n    }\n    \n    .choice-btn.incorrect {\n      background: linear-gradient(135deg, #f44336, #ef5350);\n    }\n    \n    /* Score display */\n    .score-display {\n      background: rgba(125, 19, 70, 0.1);\n      padding: 8px 16px;\n      border-radius: 8px;\n      font-weight: 600;\n      color: ${THEME.colors.primary};\n    }\n    \n    /* Timer with warning states */\n    .timer-display {\n      background: rgba(125, 19, 70, 0.1);\n      color: ${THEME.colors.primary};\n      font-weight: 700;\n    }\n    \n    .timer-display.warning {\n      background: #FFEBEE;\n      color: #D32F2F;\n    }\n    \n    /* Headers and text */\n    h1, h2, h3 {\n      color: ${THEME.colors.primary};\n    }\n    \n    .question {\n      color: ${THEME.colors.text};\n      font-size: 18px;\n      font-weight: 600;\n      margin: 20px 0;\n      text-align: center;\n    }\n    \n    /* Level badges */\n    .level-badge {\n      background: ${THEME.colors.buttonGradient};\n      color: white;\n      padding: 6px 12px;\n      border-radius: 20px;\n      font-size: 12px;\n      font-weight: 600;\n      text-transform: uppercase;\n      display: inline-block;\n    }\n    \n    /* Feedback messages */\n    .feedback {\n      padding: 15px;\n      border-radius: 8px;\n      margin: 15px 0;\n      font-weight: 600;\n      text-align: center;\n    }\n    \n    .feedback.correct {\n      background: #e8f5e9;\n      color: #2e7d32;\n      border: 2px solid #4caf50;\n    }\n    \n    .feedback.incorrect {\n      background: #ffebee;\n      color: #c62828;\n      border: 2px solid #f44336;\n    }\n    \n    /* Card selection */\n    .card.selected {\n      border: 3px solid ${THEME.colors.secondary};\n      transform: translateY(-5px);\n      box-shadow: 0 4px 8px rgba(199, 62, 154, 0.3);\n    }\n    \n    /* Next button */\n    .next-btn {\n      background: ${THEME.colors.buttonGradient};\n      color: white;\n      border: none;\n      padding: 12px 32px;\n      border-radius: 8px;\n      font-size: 16px;\n      font-weight: 600;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      margin: 20px auto;\n      display: block;\n    }\n    \n    .next-btn:hover {\n      background: ${THEME.colors.buttonHover};\n      transform: translateY(-2px);\n      box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n    }\n    \n    /* VS divider for Hand vs Hand */\n    .vs-divider {\n      font-size: 24px;\n      font-weight: 700;\n      color: ${THEME.colors.primary};\n      margin: 0 20px;\n      align-self: center;\n    }\n    \n    /* Hand display sections */\n    .hand-display {\n      text-align: center;\n      padding: 20px;\n      background: rgba(125, 19, 70, 0.05);\n      border-radius: 8px;\n      margin: 10px;\n    }\n    \n    .hand-display h3 {\n      margin-bottom: 15px;\n      color: ${THEME.colors.primary};\n    }\n  `;\n}","/**\n * Game UI Manager\n * Handles UI setup, styles injection, and component lifecycle\n */\n\nimport { Timer } from '../components/Timer.js';\nimport { ScoreDisplay } from '../components/ScoreDisplay.js';\nimport { Modal, injectModalStyles } from '../components/Modal.js';\nimport { injectDefaultStyles as injectCardStyles } from './cards.js';\nimport { injectGameStyles } from './theme.js';\nimport type { GameConfig, GameState, GameResult } from '../types/games.js';\n\nexport interface UIComponents {\n  timer: Timer | null;\n  scoreDisplay: ScoreDisplay | null;\n  container: HTMLElement | null;\n  gameArea: HTMLElement | null;\n}\n\nexport class GameUIManager {\n  private components: UIComponents = {\n    timer: null,\n    scoreDisplay: null,\n    container: null,\n    gameArea: null\n  };\n  \n  private config: GameConfig;\n  \n  constructor(config: GameConfig) {\n    this.config = config;\n  }\n  \n  setupUI(container: HTMLElement, state: GameState, onTimeUp: () => void): UIComponents {\n    // Inject all necessary styles\n    injectCardStyles();\n    injectModalStyles();\n    injectGameStyles();\n    \n    // Clear existing content\n    container.innerHTML = '';\n    \n    // Clean up existing instances\n    this.cleanup();\n    \n    // Store container reference\n    this.components.container = container;\n    \n    // Create header with score and timer\n    const header = document.createElement('div');\n    header.className = 'game-header';\n    \n    // Add score display\n    this.components.scoreDisplay = new ScoreDisplay({\n      current: state.score,\n      total: state.totalRounds,\n      showStreak: true,\n      streak: state.streak\n    });\n    header.appendChild(this.components.scoreDisplay.getElement());\n    \n    // Add timer if time limit is set\n    if (this.config.timeLimit) {\n      this.components.timer = new Timer({\n        duration: this.config.timeLimit,\n        onComplete: onTimeUp,\n        allowPause: true\n      });\n      \n      const timerEl = document.createElement('div');\n      timerEl.id = 'game-timer';\n      timerEl.className = 'timer-display';\n      header.appendChild(timerEl);\n      \n      this.components.timer.attachTo(timerEl);\n    }\n    \n    container.appendChild(header);\n    \n    // Create game area\n    const gameArea = document.createElement('div');\n    gameArea.className = 'game-area';\n    gameArea.id = 'game-area';\n    container.appendChild(gameArea);\n    this.components.gameArea = gameArea;\n    \n    return this.components;\n  }\n  \n  updateScore(score: number, total: number, streak: number): void {\n    if (this.components.scoreDisplay) {\n      this.components.scoreDisplay.update({\n        current: score,\n        total,\n        streak\n      });\n    }\n  }\n  \n  incrementScore(): void {\n    if (this.components.scoreDisplay) {\n      this.components.scoreDisplay.incrementScore();\n    }\n  }\n  \n  resetStreak(): void {\n    if (this.components.scoreDisplay) {\n      this.components.scoreDisplay.resetStreak();\n    }\n  }\n  \n  startTimer(): void {\n    if (this.components.timer) {\n      this.components.timer.start();\n    }\n  }\n  \n  pauseTimer(): void {\n    if (this.components.timer) {\n      this.components.timer.pause();\n    }\n  }\n  \n  resumeTimer(): void {\n    if (this.components.timer) {\n      this.components.timer.resume();\n    }\n  }\n  \n  resetTimer(): void {\n    if (this.components.timer) {\n      this.components.timer.reset();\n    }\n  }\n  \n  stopTimer(): void {\n    if (this.components.timer) {\n      this.components.timer.stop();\n    }\n  }\n  \n  getTimerRemaining(): number {\n    return this.components.timer ? this.components.timer.getRemaining() : 0;\n  }\n  \n  setTimerRemaining(time: number): void {\n    if (this.components.timer) {\n      this.components.timer.setTimeRemaining(time);\n    }\n  }\n  \n  showResults(result: GameResult, onPlayAgain: () => void, onMainMenu: () => void): void {\n    const accuracyPercent = Math.round(result.accuracy * 100);\n    \n    const modal = new Modal({\n      title: 'Game Complete!',\n      content: `\n        <div class=\"results-content\">\n          <h3>Score: ${result.score}/${result.totalRounds}</h3>\n          <p>Accuracy: ${accuracyPercent}%</p>\n          <p>Best Streak: ${result.bestStreak}</p>\n          ${result.timeElapsed ? `<p>Time: ${Math.floor(result.timeElapsed / 60)}:${(result.timeElapsed % 60).toString().padStart(2, '0')}</p>` : ''}\n        </div>\n      `,\n      buttons: [\n        {\n          text: 'Play Again',\n          onClick: onPlayAgain,\n          isPrimary: true\n        },\n        {\n          text: 'Main Menu',\n          onClick: onMainMenu\n        }\n      ]\n    });\n    \n    modal.open();\n  }\n  \n  getGameArea(): HTMLElement | null {\n    return this.components.gameArea;\n  }\n  \n  cleanup(): void {\n    if (this.components.timer) {\n      this.components.timer.destroy();\n      this.components.timer = null;\n    }\n    \n    if (this.components.scoreDisplay) {\n      this.components.scoreDisplay.destroy();\n      this.components.scoreDisplay = null;\n    }\n    \n    if (this.components.container) {\n      this.components.container.innerHTML = '';\n      this.components.container = null;\n    }\n    \n    this.components.gameArea = null;\n  }\n  \n  getComponents(): UIComponents {\n    return this.components;\n  }\n}","/**\n * Random number generation utilities with seeded random support\n */\n\ninterface RandomState {\n  seed: number | null;\n  generator: (() => number) | null;\n}\n\nlet randomState: RandomState = {\n  seed: null,\n  generator: null\n};\n\n/**\n * Mulberry32 seeded random number generator\n * Provides deterministic random numbers when given the same seed\n */\nexport function mulberry32(seed: number): () => number {\n  return function() {\n    let t = seed += 0x6D2B79F5;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n  };\n}\n\n/**\n * Set the random seed for deterministic shuffling\n * @param seed - Seed value (use null for Math.random)\n */\nexport function setSeed(seed: number | null): void {\n  if (seed === null || seed === undefined) {\n    randomState.seed = null;\n    randomState.generator = null;\n  } else {\n    randomState.seed = seed;\n    randomState.generator = mulberry32(seed);\n  }\n}\n\n/**\n * Get the current seed\n */\nexport function getSeed(): number | null {\n  return randomState.seed;\n}\n\n/**\n * Get a random number using either seeded or Math.random\n * @returns Random number between 0 and 1\n */\nexport function getRandom(): number {\n  return randomState.generator ? randomState.generator() : Math.random();\n}\n\n/**\n * Get random integer between min and max (inclusive)\n */\nexport function getRandomInt(min: number, max: number): number {\n  return Math.floor(getRandom() * (max - min + 1)) + min;\n}\n\n/**\n * Get hourly seed based on UTC time\n * Ensures all players get the same puzzles within the same hour\n */\nexport function getHourlySeed(offset: number = 0): number {\n  const now = new Date();\n  const utcHour = Date.UTC(\n    now.getUTCFullYear(),\n    now.getUTCMonth(),\n    now.getUTCDate(),\n    now.getUTCHours()\n  );\n  return utcHour + offset;\n}\n\n/**\n * Get daily seed based on UTC date\n * Ensures all players get the same puzzles on the same day\n */\nexport function getDailySeed(offset: number = 0): number {\n  const now = new Date();\n  const utcDay = Date.UTC(\n    now.getUTCFullYear(),\n    now.getUTCMonth(),\n    now.getUTCDate()\n  );\n  return utcDay + offset;\n}\n\n/**\n * Shuffle an array in place using Fisher-Yates algorithm\n * Uses the current random state (seeded or not)\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  const newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(getRandom() * (i + 1));\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n  }\n  return newArray;\n}\n\n/**\n * Pick a random element from an array\n */\nexport function pickRandom<T>(array: T[]): T | undefined {\n  if (array.length === 0) return undefined;\n  return array[Math.floor(getRandom() * array.length)];\n}\n\n/**\n * Pick multiple random elements from an array (without replacement)\n */\nexport function pickMultipleRandom<T>(array: T[], count: number): T[] {\n  if (count >= array.length) return [...array];\n  \n  const shuffled = shuffleArray(array);\n  return shuffled.slice(0, count);\n}\n\n/**\n * Create a random number generator with a specific seed\n * This doesn't affect the global random state\n */\nexport function createSeededRandom(seed: number): {\n  random: () => number;\n  randomInt: (min: number, max: number) => number;\n  shuffle: <T>(array: T[]) => T[];\n  pick: <T>(array: T[]) => T | undefined;\n} {\n  const generator = mulberry32(seed);\n  \n  return {\n    random: generator,\n    randomInt: (min: number, max: number) => {\n      return Math.floor(generator() * (max - min + 1)) + min;\n    },\n    shuffle: <T>(array: T[]) => {\n      const newArray = [...array];\n      for (let i = newArray.length - 1; i > 0; i--) {\n        const j = Math.floor(generator() * (i + 1));\n        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n      }\n      return newArray;\n    },\n    pick: <T>(array: T[]) => {\n      if (array.length === 0) return undefined;\n      return array[Math.floor(generator() * array.length)];\n    }\n  };\n}\n\n/**\n * Reset random state to use Math.random\n */\nexport function resetRandom(): void {\n  setSeed(null);\n}","/**\n * Refactored Base Game Class\n * Uses composition instead of inheritance for better modularity\n * Reduced from 423 lines to ~200 lines\n */\n\nimport type { IGame, GameConfig, GameState, GameResult, GameScenario } from '../types/games.js';\nimport type { GameModule, GameState as RouterGameState } from '../types/router.js';\nimport { GameStateManager } from '../lib/game-state-manager.js';\nimport { GameResultsManager } from '../lib/game-results-manager.js';\nimport { GameUIManager } from '../lib/game-ui-manager.js';\nimport { getHourlySeed, setSeed, resetRandom } from '../lib/random.js';\n\nexport abstract class BaseGame implements IGame, GameModule {\n  config: GameConfig;\n  protected stateManager: GameStateManager;\n  protected resultsManager: GameResultsManager;\n  protected uiManager: GameUIManager;\n  \n  protected currentScenario: GameScenario | null = null;\n  protected scenarios: GameScenario[] = [];\n  protected container: HTMLElement | null = null;\n  \n  constructor(config: GameConfig) {\n    this.config = config;\n    this.stateManager = new GameStateManager(config);\n    this.resultsManager = new GameResultsManager(config.name);\n    this.uiManager = new GameUIManager(config);\n  }\n  \n  // Simplified public interface\n  get state(): GameState {\n    return this.stateManager.getState();\n  }\n  \n  initialize(): void {\n    // Set up seeded random if needed\n    if (this.shouldUseSeed()) {\n      const seed = this.getSeed();\n      setSeed(seed);\n    }\n    \n    // Generate all scenarios upfront\n    this.scenarios = this.generateScenarios();\n    \n    // Reset random state\n    resetRandom();\n    \n    // Start tracking results\n    this.resultsManager.startTracking();\n  }\n  \n  start(): void {\n    if (this.state.currentRound === 0) {\n      this.initialize();\n    }\n    \n    this.stateManager.resume();\n    this.uiManager.startTimer();\n    this.nextRound();\n  }\n  \n  pause(): void {\n    this.stateManager.pause();\n    this.uiManager.pauseTimer();\n  }\n  \n  resume(): void {\n    this.stateManager.resume();\n    this.uiManager.resumeTimer();\n  }\n  \n  reset(): void {\n    this.stateManager.reset();\n    this.resultsManager.reset();\n    this.uiManager.resetTimer();\n    this.currentScenario = null;\n    this.scenarios = [];\n    this.initialize();\n  }\n  \n  nextRound(): void {\n    if (!this.stateManager.nextRound()) {\n      this.endGame();\n      return;\n    }\n    \n    const state = this.state;\n    this.currentScenario = this.scenarios[state.currentRound - 1];\n    \n    this.uiManager.updateScore(state.score, state.totalRounds, state.streak);\n    this.renderScenario();\n  }\n  \n  submitAnswer(answer: any): boolean {\n    if (!this.currentScenario || this.state.isPaused || this.state.isComplete) {\n      return false;\n    }\n    \n    const isCorrect = this.checkAnswer(answer, this.currentScenario.correctAnswer);\n    const timeToAnswer = this.config.timeLimit ? \n      this.config.timeLimit - this.uiManager.getTimerRemaining() : undefined;\n    \n    // Record answer\n    this.resultsManager.recordAnswer(answer, isCorrect, timeToAnswer);\n    \n    // Update state\n    if (isCorrect) {\n      this.stateManager.incrementScore();\n      this.uiManager.incrementScore();\n    } else {\n      this.stateManager.recordMistake();\n      this.uiManager.resetStreak();\n    }\n    \n    // Handle feedback\n    this.handleAnswerFeedback(isCorrect, answer);\n    \n    // Auto-advance\n    setTimeout(() => {\n      if (!this.state.isPaused && !this.state.isComplete) {\n        this.nextRound();\n      }\n    }, isCorrect ? 500 : 2000);\n    \n    return isCorrect;\n  }\n  \n  protected endGame(): void {\n    this.stateManager.complete();\n    this.uiManager.stopTimer();\n    \n    const state = this.state;\n    const result = this.resultsManager.calculateResult(state);\n    \n    // Save high score if applicable\n    this.resultsManager.saveIfHighScore(state);\n    this.resultsManager.recordGamePlayed();\n    \n    // Show results\n    this.uiManager.showResults(\n      result,\n      () => {\n        this.reset();\n        this.start();\n      },\n      () => {\n        window.location.href = '/';\n      }\n    );\n  }\n  \n  getResult(): GameResult {\n    return this.resultsManager.calculateResult(this.state);\n  }\n  \n  saveHighScore(): void {\n    this.resultsManager.saveIfHighScore(this.state);\n  }\n  \n  // GameModule interface implementation\n  mount(container: HTMLElement, state?: RouterGameState): void {\n    this.container = container;\n    this.render(container);\n    \n    // Restore state if available and game not complete\n    if (state && state.gameState && !state.gameState.isComplete) {\n      this.deserialize(state);\n    }\n  }\n  \n  unmount(): void {\n    this.destroy();\n  }\n  \n  render(container: HTMLElement): void {\n    // Reset state for a fresh game\n    this.stateManager.reset();\n    this.resultsManager.reset();\n    this.scenarios = [];\n    this.currentScenario = null;\n    \n    // Setup UI\n    this.uiManager.setupUI(\n      container, \n      this.state,\n      () => this.handleTimeUp()\n    );\n    \n    this.renderGame();\n  }\n  \n  destroy(): void {\n    this.uiManager.cleanup();\n    this.container = null;\n  }\n  \n  serialize(): RouterGameState {\n    return {\n      gameState: this.stateManager.serialize(),\n      currentRound: this.state.currentRound,\n      score: this.state.score,\n      streak: this.state.streak,\n      bestStreak: this.state.bestStreak,\n      scenarios: this.scenarios,\n      currentScenario: this.currentScenario,\n      ...this.resultsManager.serialize()\n    };\n  }\n  \n  deserialize(state: RouterGameState): void {\n    if (state.gameState) {\n      this.stateManager.deserialize(state.gameState);\n    }\n    if (state.answers || state.startTime) {\n      this.resultsManager.deserialize({\n        answers: state.answers || [],\n        startTime: state.startTime || 0\n      });\n    }\n    if (state.scenarios) {\n      this.scenarios = state.scenarios;\n    }\n    if (state.currentScenario) {\n      this.currentScenario = state.currentScenario;\n    }\n    \n    // Update UI to reflect restored state\n    const currentState = this.state;\n    this.uiManager.updateScore(\n      currentState.score,\n      currentState.totalRounds,\n      currentState.streak\n    );\n    \n    if (currentState.timeRemaining) {\n      this.uiManager.setTimerRemaining(currentState.timeRemaining);\n    }\n    \n    // Re-render current scenario\n    if (this.currentScenario) {\n      this.renderScenario();\n    }\n  }\n  \n  protected handleTimeUp(): void {\n    this.endGame();\n  }\n  \n  // Abstract methods that must be implemented by subclasses\n  protected abstract generateScenarios(): GameScenario[];\n  protected abstract renderScenario(): void;\n  protected abstract renderGame(): void;\n  protected abstract checkAnswer(answer: any, correctAnswer: any): boolean;\n  protected abstract handleAnswerFeedback(isCorrect: boolean, answer: any): void;\n  \n  // Optional methods\n  protected shouldUseSeed(): boolean {\n    return false;\n  }\n  \n  protected getSeed(): number {\n    return getHourlySeed();\n  }\n}"],"names":["GameStateManager","constructor","config","this","state","createInitialState","currentRound","totalRounds","rounds","score","streak","bestStreak","timeRemaining","timeLimit","isComplete","isPaused","mistakes","getState","setState","updates","reset","nextRound","incrementScore","Math","max","recordMistake","pause","resume","complete","serialize","deserialize","STORAGE_PREFIX","StorageKeys","HIGH_SCORES","GAME_PROGRESS","COMPLETED_LEVELS","isStorageAvailable","testKey","localStorage","setItem","removeItem","getStorageItem","key","defaultValue","item","getItem","JSON","parse","error","setStorageItem","value","stringify","getHighScores","isNewHighScore","gameName","currentHigh","getHighScore","incrementGamesPlayed","progress","gamesPlayed","highScores","achievements","totalPlayTime","getCompletedLevels","levels","Set","markLevelCompleted","levelId","completed","add","Array","from","GameResultsManager","answers","startTime","startTracking","Date","now","recordAnswer","answer","isCorrect","timeToAnswer","push","timestamp","getAnswers","calculateResult","timeElapsed","floor","accuracy","saveIfHighScore","result","scores","saveHighScore","game","date","toISOString","recordGamePlayed","formatTime","seconds","toString","padStart","getAccuracyPercent","round","data","Timer","options","intervalId","pausedElapsedTime","pauseStartTime","element","format","showWarning","warningThreshold","allowPause","duration","remaining","attachTo","document","getElementById","style","cursor","title","addEventListener","toggle","updateDisplay","start","window","setInterval","tick","stop","clearInterval","classList","remove","getRemaining","getElapsed","isExpired","elapsed","onTick","onComplete","displayText","pauseIndicator","textContent","toFixed","destroy","setTimeRemaining","ScoreDisplay","showStreak","showAccuracy","createElement","update","container","className","parts","current","total","accuracyPercent","innerHTML","join","updateAccuracy","resetStreak","parent","parentEl","appendChild","getElement","parentNode","removeChild","Modal","isOpen","closeOnBackdrop","closeOnEscape","createModalStructure","backdrop","querySelector","setupEventListeners","body","content","buttons","length","footer","forEach","btn","button","createButton","buttonConfig","text","isPrimary","onClick","includes","close","closeBtn","handleEscape","bind","event","open","querySelectorAll","modal","offsetHeight","onOpen","removeEventListener","setTimeout","onClose","setContent","confirm","message","onConfirm","onCancel","alert","THEME","primary","secondary","secondaryLight","textLight","buttonGradient","buttonHover","injectGameStyles","id","head","GameUIManager","components","timer","scoreDisplay","gameArea","setupUI","onTimeUp","injectCardStyles","injectModalStyles","cleanup","header","timerEl","updateScore","startTimer","pauseTimer","resumeTimer","resetTimer","stopTimer","getTimerRemaining","setTimerRemaining","time","showResults","onPlayAgain","onMainMenu","getGameArea","getComponents","randomState","seed","generator","setSeed","t","imul","mulberry32","getRandom","random","getHourlySeed","offset","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","shuffleArray","array","newArray","i","j","BaseGame","currentScenario","scenarios","stateManager","resultsManager","name","uiManager","initialize","shouldUseSeed","getSeed","generateScenarios","endGame","renderScenario","submitAnswer","checkAnswer","correctAnswer","handleAnswerFeedback","location","href","getResult","mount","render","gameState","unmount","handleTimeUp","renderGame","currentState"],"mappings":"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"}