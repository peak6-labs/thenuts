{"version":3,"file":"HandVsHand-pZVq4nSL.js","sources":["../../src/games/foundation/HandVsHand.ts"],"sourcesContent":["/**\n * Hand vs Hand - Compare two poker hands\n */\n\nimport { BaseGame } from '../BaseGame.js';\nimport type { GameScenario, GameConfig } from '../../types/games';\nimport * as Cards from '../../lib/cards.js';\nimport * as Random from '../../lib/random.js';\nimport { compareHandsWithSolver, getHandDescription } from '../../lib/pokersolver-wrapper.js';\n\ninterface HandVsHandScenario extends GameScenario {\n  hand1: string[];\n  hand2: string[];\n  winner: 'hand1' | 'hand2' | 'tie';\n}\n\nexport class HandVsHand extends BaseGame {\n  protected containerId: string = 'game-container';\n  protected scenarios: HandVsHandScenario[] = [];\n  // Override base class currentScenario with more specific type\n  protected declare currentScenario: GameScenario | null;\n\n  constructor(config: Partial<GameConfig> = {}) {\n    super({\n      name: 'Hand vs Hand',\n      difficulty: 'foundation',\n      rounds: 10,\n      timeLimit: 30,\n      description: 'Compare two poker hands and determine the winner',\n      instructions: ['Look at both hands', 'Determine which hand wins', 'Select your answer'],\n      ...config\n    });\n  }\n\n  protected generateScenarios(): GameScenario[] {\n    const scenarios: HandVsHandScenario[] = [];\n    const usedPairs = new Set<string>();\n    \n    // Use seeded random for consistent games\n    Random.setSeed(Random.getHourlySeed());\n\n    for (let i = 0; i < this.config.rounds; i++) {\n      let scenario: HandVsHandScenario | null = null;\n      let attempts = 0;\n      \n      while (!scenario && attempts < 50) {\n        attempts++;\n        \n        // Generate two different 5-card hands\n        const deck = Cards.generateDeck({ shuffled: true });\n        const hand1 = deck.slice(0, 5);\n        const hand2 = deck.slice(5, 10);\n        \n        // Evaluate hands using pokersolver\n        const desc1 = getHandDescription(hand1);\n        const desc2 = getHandDescription(hand2);\n        \n        // Create signature to avoid duplicates\n        const signature = `${desc1}-${desc2}`;\n        if (usedPairs.has(signature)) continue;\n        \n        usedPairs.add(signature);\n        \n        // Determine winner using pokersolver\n        let winner: 'hand1' | 'hand2' | 'tie';\n        let explanation: string;\n        \n        const comparison = compareHandsWithSolver(hand1, hand2);\n        if (comparison > 0) {\n          winner = 'hand1';\n          explanation = `${desc1} beats ${desc2}`;\n        } else if (comparison < 0) {\n          winner = 'hand2';\n          explanation = `${desc2} beats ${desc1}`;\n        } else {\n          winner = 'tie';\n          explanation = `Both hands are ${desc1} - it's a tie!`;\n        }\n        \n        scenario = {\n          id: `hvh-${i}`,\n          hand1,\n          hand2,\n          winner,\n          choices: [\n            { id: 'hand1', display: 'Hand 1 wins' },\n            { id: 'hand2', display: 'Hand 2 wins' },\n            { id: 'tie', display: \"It's a tie\" }\n          ],\n          correctAnswer: winner,\n          explanation\n        };\n      }\n      \n      if (scenario) {\n        scenarios.push(scenario);\n      }\n    }\n    \n    this.scenarios = scenarios;\n    return scenarios;\n  }\n\n  protected renderScenario(): void {\n    const scenario = this.scenarios[this.state.currentRound - 1] as HandVsHandScenario;\n    if (!scenario) return;\n    \n    this.currentScenario = scenario;\n    \n    const gameArea = this.uiManager.getGameArea();\n    if (!gameArea) return;\n    \n    gameArea.innerHTML = `\n      <div class=\"hands-comparison\">\n        <div class=\"hand-display\">\n          <h3>Hand 1</h3>\n          <div class=\"cards-row\" id=\"hand1-cards\"></div>\n        </div>\n        \n        <div class=\"vs-divider\">VS</div>\n        \n        <div class=\"hand-display\">\n          <h3>Hand 2</h3>\n          <div class=\"cards-row\" id=\"hand2-cards\"></div>\n        </div>\n      </div>\n      \n      <div class=\"question\">Which hand wins?</div>\n      \n      <div class=\"choice-buttons\">\n        <button class=\"choice-btn\" data-choice=\"hand1\">Hand 1 Wins</button>\n        <button class=\"choice-btn\" data-choice=\"tie\">It's a Tie</button>\n        <button class=\"choice-btn\" data-choice=\"hand2\">Hand 2 Wins</button>\n      </div>\n    `;\n    \n    // Render cards\n    Cards.renderCards(scenario.hand1, 'hand1-cards', { width: 90, height: 130 });\n    Cards.renderCards(scenario.hand2, 'hand2-cards', { width: 90, height: 130 });\n    \n    // Add event listeners\n    const buttons = gameArea.querySelectorAll('.choice-btn');\n    buttons.forEach(btn => {\n      btn.addEventListener('click', () => {\n        const choice = btn.getAttribute('data-choice');\n        if (choice) {\n          this.handleAnswer(choice);\n        }\n      });\n    });\n  }\n\n  protected handleAnswer(answerId: string): void {\n    // Use the base class submitAnswer method\n    this.submitAnswer(answerId);\n  }\n\n  private showFeedback(isCorrect: boolean, selected: string, correct: string, explanation: string): void {\n    const gameArea = this.uiManager.getGameArea();\n    if (!gameArea) return;\n    \n    // Disable and style buttons\n    const buttons = gameArea.querySelectorAll('.choice-btn');\n    buttons.forEach(btn => {\n      const button = btn as HTMLButtonElement;\n      button.disabled = true;\n      const choice = button.getAttribute('data-choice');\n      \n      // Highlight correct answer in green\n      if (choice === correct) {\n        button.style.background = '#4CAF50';\n        button.style.color = 'white';\n        button.style.borderColor = '#4CAF50';\n      }\n      // If wrong, show selected in red\n      else if (choice === selected && !isCorrect) {\n        button.style.background = '#F44336';\n        button.style.color = 'white';\n        button.style.borderColor = '#F44336';\n      }\n    });\n    \n    // Show result message\n    const resultDiv = document.createElement('div');\n    resultDiv.className = 'result-message';\n    resultDiv.style.cssText = `\n      text-align: center;\n      margin-top: 20px;\n      padding: 15px;\n      background: ${isCorrect ? '#E8F5E9' : '#FFEBEE'};\n      border-radius: 8px;\n      border: 2px solid ${isCorrect ? '#4CAF50' : '#F44336'};\n    `;\n    resultDiv.innerHTML = `\n      <div style=\"font-size: 2em; margin-bottom: 10px;\">${isCorrect ? '✓ Correct!' : '✗ Incorrect'}</div>\n      <div style=\"font-size: 1.1em; color: #333;\">${explanation}</div>\n    `;\n    \n    // Insert after the buttons\n    const buttonContainer = gameArea.querySelector('.choice-buttons');\n    if (buttonContainer && buttonContainer.parentNode) {\n      buttonContainer.parentNode.insertBefore(resultDiv, buttonContainer.nextSibling);\n    }\n  }\n  \n  protected renderGame(): void {\n    // Add the HandVsHand specific styles\n    this.addStyles();\n  }\n  \n  private addStyles(): void {\n    if (document.getElementById('hand-vs-hand-styles')) return;\n    \n    const style = document.createElement('style');\n    style.id = 'hand-vs-hand-styles';\n    style.textContent = getHandVsHandStyles();\n    document.head.appendChild(style);\n  }\n  \n  protected checkAnswer(userAnswer: any, correctAnswer: any): boolean {\n    return userAnswer === correctAnswer;\n  }\n  \n  protected handleAnswerFeedback(isCorrect: boolean, answer: any): void {\n    const scenario = this.currentScenario as unknown as HandVsHandScenario;\n    if (!scenario) return;\n    \n    this.showFeedback(isCorrect, answer, scenario.winner, scenario.explanation || '');\n  }\n  \n  getInstructions(): string {\n    return \"Compare two poker hands and determine which one wins. Remember the hand rankings!\";\n  }\n}\n\n// Add styles\nexport function getHandVsHandStyles(): string {\n  return `\n    .hands-comparison {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      gap: 40px;\n      margin: 30px 0;\n      flex-wrap: wrap;\n    }\n    \n    .hand-display {\n      text-align: center;\n    }\n    \n    .hand-display h3 {\n      color: #7D1346;\n      margin-bottom: 15px;\n    }\n    \n    .cards-row {\n      display: flex;\n      justify-content: center;\n      gap: 5px;\n    }\n    \n    .vs-divider {\n      font-size: 2em;\n      font-weight: bold;\n      color: #C73E9A;\n      padding: 0 20px;\n    }\n    \n    .question {\n      text-align: center;\n      font-size: 1.3em;\n      margin: 20px 0;\n      color: #333;\n      font-weight: 600;\n    }\n    \n    .choice-buttons {\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n      margin-top: 30px;\n      flex-wrap: wrap;\n    }\n    \n    .choice-btn {\n      padding: 15px 30px;\n      font-size: 1.1em;\n      background: white;\n      border: 2px solid #C73E9A;\n      border-radius: 8px;\n      color: #C73E9A;\n      cursor: pointer;\n      transition: all 0.3s;\n      font-weight: 600;\n    }\n    \n    .choice-btn:hover:not(:disabled) {\n      background: #C73E9A;\n      color: white;\n      transform: translateY(-2px);\n    }\n    \n    .choice-btn:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n    \n    .feedback {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: white;\n      padding: 30px;\n      border-radius: 15px;\n      box-shadow: 0 10px 40px rgba(0,0,0,0.3);\n      text-align: center;\n      z-index: 100;\n    }\n    \n    .feedback-icon {\n      font-size: 3em;\n      margin-bottom: 10px;\n    }\n    \n    .feedback.correct .feedback-icon {\n      color: #4CAF50;\n    }\n    \n    .feedback.incorrect .feedback-icon {\n      color: #F44336;\n    }\n    \n    .feedback-text {\n      font-size: 1.2em;\n      color: #333;\n      font-weight: 600;\n    }\n    \n    @media (max-width: 768px) {\n      .hands-comparison {\n        flex-direction: column;\n        gap: 20px;\n      }\n      \n      .vs-divider {\n        padding: 10px 0;\n      }\n    }\n  `;\n}"],"names":["HandVsHand","BaseGame","constructor","config","super","name","difficulty","rounds","timeLimit","description","instructions","this","containerId","scenarios","generateScenarios","usedPairs","Set","Random.setSeed","Random.getHourlySeed","i","scenario","attempts","deck","Cards.generateDeck","shuffled","hand1","slice","hand2","desc1","getHandDescription","desc2","signature","has","winner","explanation","add","comparison","compareHandsWithSolver","id","choices","display","correctAnswer","push","renderScenario","state","currentRound","currentScenario","gameArea","uiManager","getGameArea","innerHTML","Cards.renderCards","width","height","querySelectorAll","forEach","btn","addEventListener","choice","getAttribute","handleAnswer","answerId","submitAnswer","showFeedback","isCorrect","selected","correct","button","disabled","style","background","color","borderColor","resultDiv","document","createElement","className","cssText","buttonContainer","querySelector","parentNode","insertBefore","nextSibling","renderGame","addStyles","getElementById","textContent","getHandVsHandStyles","head","appendChild","checkAnswer","userAnswer","handleAnswerFeedback","answer","getInstructions"],"mappings":"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"}