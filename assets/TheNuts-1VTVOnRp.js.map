{"version":3,"file":"TheNuts-1VTVOnRp.js","sources":["../../src/games/advanced/TheNuts.ts"],"sourcesContent":["/**\n * The Nuts - Advanced level game\n * Players identify the best possible hand for any board\n */\n\nimport { BaseGame } from '../BaseGame.js';\nimport type { GameConfig, GameScenario, Choice } from '../../types/games.js';\n\ntype GameLevel = 'level1' | 'level2' | 'level3';\nimport { \n  generateDeck,\n  renderCards,\n  shuffleDeck,\n  formatHoleCards\n} from '../../lib/cards.js';\nimport { \n  getHourlySeed,\n  shuffleArray\n} from '../../lib/random.js';\nimport { \n  getCompletedLevels,\n  markLevelCompleted \n} from '../../lib/storage.js';\nimport {\n  findTheNuts as findTheNutsWithSolver,\n  findBestHand\n} from '../../lib/pokersolver-wrapper.js';\n\ninterface NutsChoice extends Choice {\n  holeCards: [string, string];\n  handStrength?: number;\n}\n\nexport class TheNuts extends BaseGame {\n  private currentLevel: GameLevel = 'level1';\n  \n  constructor(level: GameLevel = 'level1') {\n    const config: GameConfig = {\n      name: 'The Nuts',\n      difficulty: 'advanced',\n      rounds: 15,\n      timeLimit: level === 'level3' ? 30 : 60,\n      description: 'Identify the absolute best possible hand',\n      instructions: [\n        'Look at the community cards',\n        'Find which hole cards make the nuts',\n        'Level 1: Hints show what each choice makes',\n        'Level 2: No hints, standard difficulty',\n        'Level 3: Very close hands, 30-second timer',\n        'Get 15/15 correct to advance levels'\n      ]\n    };\n    \n    super(config);\n    this.currentLevel = level;\n    getCompletedLevels(); // Check completed levels if needed\n  }\n  \n  protected shouldUseSeed(): boolean {\n    return true; // Use deterministic scenarios\n  }\n  \n  protected getSeed(): number {\n    const levelOffset = this.currentLevel === 'level1' ? 0 :\n                       this.currentLevel === 'level2' ? 1000 : 2000;\n    return getHourlySeed(levelOffset);\n  }\n  \n  protected generateScenarios(): GameScenario[] {\n    const scenarios: GameScenario[] = [];\n    const deck = generateDeck({ shuffled: false });\n    \n    for (let i = 0; i < this.config.rounds; i++) {\n      const scenario = this.generateLevelScenario(deck);\n      scenarios.push(scenario);\n    }\n    \n    return scenarios;\n  }\n  \n  private generateLevelScenario(deck: string[]): GameScenario {\n    switch (this.currentLevel) {\n      case 'level1':\n        return this.generateLevel1Scenario(deck);\n      case 'level2':\n        return this.generateLevel2Scenario(deck);\n      case 'level3':\n        return this.generateLevel3Scenario(deck);\n      default:\n        return this.generateLevel2Scenario(deck);\n    }\n  }\n  \n  private generateLevel1Scenario(deck: string[]): GameScenario {\n    const shuffled = shuffleDeck(deck);\n    const communityCards = shuffled.slice(0, 5);\n    const remainingDeck = shuffled.slice(5);\n    \n    // Find the actual nuts\n    const nuts = this.findTheNuts(communityCards, remainingDeck);\n    \n    // Generate decoy hands with wide strength gaps\n    const choices: NutsChoice[] = [\n      {\n        id: 'nuts',\n        display: formatHoleCards(nuts.holeCards),\n        value: nuts.holeCards,\n        holeCards: nuts.holeCards,\n        handStrength: 100,\n        hint: `(Makes: ${nuts.description})`\n      }\n    ];\n    \n    // Add 3 progressively weaker hands\n    const strengthTargets = [70, 40, 10];\n    for (const target of strengthTargets) {\n      const decoy = this.generateDecoyHand(\n        communityCards, \n        remainingDeck, \n        target,\n        choices.map(c => c.holeCards)\n      );\n      \n      choices.push({\n        id: `decoy-${target}`,\n        display: formatHoleCards(decoy.holeCards),\n        value: decoy.holeCards,\n        holeCards: decoy.holeCards,\n        handStrength: target,\n        hint: `(Makes: ${decoy.description})`\n      });\n    }\n    \n    return {\n      id: `level1-round-${this.state.currentRound}`,\n      communityCards: {\n        flop: [communityCards[0], communityCards[1], communityCards[2]],\n        turn: communityCards[3],\n        river: communityCards[4]\n      },\n      choices: shuffleArray(choices),\n      correctAnswer: nuts.holeCards.join(',')\n    };\n  }\n  \n  private generateLevel2Scenario(deck: string[]): GameScenario {\n    const shuffled = shuffleDeck(deck);\n    const communityCards = shuffled.slice(0, 5);\n    const remainingDeck = shuffled.slice(5);\n    \n    const nuts = this.findTheNuts(communityCards, remainingDeck);\n    \n    // Standard difficulty - no hints\n    const choices: NutsChoice[] = [\n      {\n        id: 'nuts',\n        display: formatHoleCards(nuts.holeCards),\n        value: nuts.holeCards,\n        holeCards: nuts.holeCards,\n        handStrength: 100\n      }\n    ];\n    \n    // Add decoys with moderate strength differences\n    const strengthTargets = [80, 60, 40];\n    for (const target of strengthTargets) {\n      const decoy = this.generateDecoyHand(\n        communityCards, \n        remainingDeck, \n        target,\n        choices.map(c => c.holeCards)\n      );\n      \n      choices.push({\n        id: `decoy-${target}`,\n        display: formatHoleCards(decoy.holeCards),\n        value: decoy.holeCards,\n        holeCards: decoy.holeCards,\n        handStrength: target\n      });\n    }\n    \n    return {\n      id: `level2-round-${this.state.currentRound}`,\n      communityCards: {\n        flop: [communityCards[0], communityCards[1], communityCards[2]],\n        turn: communityCards[3],\n        river: communityCards[4]\n      },\n      choices: shuffleArray(choices),\n      correctAnswer: nuts.holeCards.join(',')\n    };\n  }\n  \n  private generateLevel3Scenario(deck: string[]): GameScenario {\n    const shuffled = shuffleDeck(deck);\n    const communityCards = shuffled.slice(0, 5);\n    const remainingDeck = shuffled.slice(5);\n    \n    const nuts = this.findTheNuts(communityCards, remainingDeck);\n    \n    // Hard difficulty - all near-nuts hands\n    const choices: NutsChoice[] = [\n      {\n        id: 'nuts',\n        display: formatHoleCards(nuts.holeCards),\n        value: nuts.holeCards,\n        holeCards: nuts.holeCards,\n        handStrength: 100\n      }\n    ];\n    \n    // Add very strong decoys (90+ strength)\n    const strengthTargets = [95, 92, 90];\n    for (const target of strengthTargets) {\n      const decoy = this.generateDecoyHand(\n        communityCards, \n        remainingDeck, \n        target,\n        choices.map(c => c.holeCards)\n      );\n      \n      choices.push({\n        id: `decoy-${target}`,\n        display: formatHoleCards(decoy.holeCards),\n        value: decoy.holeCards,\n        holeCards: decoy.holeCards,\n        handStrength: target\n      });\n    }\n    \n    return {\n      id: `level3-round-${this.state.currentRound}`,\n      communityCards: {\n        flop: [communityCards[0], communityCards[1], communityCards[2]],\n        turn: communityCards[3],\n        river: communityCards[4]\n      },\n      choices: shuffleArray(choices),\n      correctAnswer: nuts.holeCards.join(',')\n    };\n  }\n  \n  private findTheNuts(\n    communityCards: string[], \n    deck: string[]\n  ): { holeCards: [string, string]; description: string } {\n    // Use pokersolver for accurate nuts finding\n    return findTheNutsWithSolver(communityCards, deck);\n  }\n  \n  private generateDecoyHand(\n    communityCards: string[],\n    deck: string[],\n    targetStrength: number,\n    usedHoleCards: [string, string][]\n  ): { holeCards: [string, string]; description: string } {\n    // Generate strategic decoys based on target strength\n    const availableCards = deck.filter(card => {\n      return !usedHoleCards.some(used => \n        used.includes(card)\n      );\n    });\n    \n    // Collect potential hands with their evaluations\n    const candidates: Array<{\n      holeCards: [string, string];\n      description: string;\n      strength: number;\n    }> = [];\n    \n    // Try various hole card combinations\n    for (let i = 0; i < Math.min(availableCards.length - 1, 20); i++) {\n      for (let j = i + 1; j < Math.min(availableCards.length, 21); j++) {\n        const holeCards: [string, string] = [\n          availableCards[i],\n          availableCards[j]\n        ];\n        const allCards = [...communityCards, ...holeCards];\n        const bestHand = findBestHand(allCards);\n        \n        // Estimate hand strength (simplified)\n        const strength = this.estimateHandStrength(bestHand.description);\n        \n        candidates.push({\n          holeCards,\n          description: bestHand.description,\n          strength\n        });\n      }\n    }\n    \n    // Sort by how close they are to target strength\n    candidates.sort((a, b) => {\n      const diffA = Math.abs(a.strength - targetStrength);\n      const diffB = Math.abs(b.strength - targetStrength);\n      return diffA - diffB;\n    });\n    \n    // Return the closest match\n    const selected = candidates[0] || {\n      holeCards: [availableCards[0], availableCards[1]] as [string, string],\n      description: 'High Card'\n    };\n    \n    return {\n      holeCards: selected.holeCards,\n      description: selected.description\n    };\n  }\n  \n  private estimateHandStrength(description: string): number {\n    // Rough strength estimates based on hand type\n    const lowerDesc = description.toLowerCase();\n    \n    if (lowerDesc.includes('straight flush')) return 99;\n    if (lowerDesc.includes('four of a kind')) return 95;\n    if (lowerDesc.includes('full house')) return 90;\n    if (lowerDesc.includes('flush')) return 85;\n    if (lowerDesc.includes('straight')) return 80;\n    if (lowerDesc.includes('three of a kind')) return 70;\n    if (lowerDesc.includes('two pair')) return 60;\n    if (lowerDesc.includes('pair')) return 40;\n    return 20; // High card\n  }\n  \n  protected renderScenario(): void {\n    \n    if (!this.currentScenario || !this.container) return;\n    \n    const gameArea = this.container.querySelector('#game-area');\n    if (!gameArea) {\n      console.error('Game area not found in container');\n      console.log('Container contents:', this.container.innerHTML);\n      return;\n    }\n    \n    const cards: string[] = [];\n    if (this.currentScenario.communityCards) {\n      const { flop, turn, river } = this.currentScenario.communityCards;\n      if (flop) cards.push(...flop as string[]);\n      if (turn) cards.push(turn as string);\n      if (river) cards.push(river as string);\n    }\n    \n    gameArea.innerHTML = `\n      <div class=\"level-indicator\">\n        <span class=\"level-badge\">${this.currentLevel.toUpperCase()}</span>\n        <span class=\"round-info\">Round ${this.state.currentRound}/${this.state.totalRounds}</span>\n      </div>\n      \n      <div class=\"board-section\">\n        <h3>Community Cards</h3>\n        <div class=\"community-cards\" id=\"community-cards\"></div>\n      </div>\n      \n      <div class=\"question\">\n        <p>What is the nuts? (The best possible hand ANY player could have)</p>\n      </div>\n      \n      <div class=\"choices-grid\" id=\"choices-grid\"></div>\n      \n      <div class=\"feedback\" id=\"feedback\" style=\"display: none;\"></div>\n    `;\n    \n    // Render community cards\n    // Use default card dimensions from library\n    renderCards(cards, gameArea.querySelector('#community-cards') as HTMLElement);\n    \n    // Render choices\n    const choicesGrid = gameArea.querySelector('#choices-grid');\n    if (choicesGrid && this.currentScenario.choices) {\n      for (const choice of this.currentScenario.choices as NutsChoice[]) {\n        const button = document.createElement('button');\n        button.className = 'hole-cards-btn choice-btn';\n        button.innerHTML = `\n          <div class=\"hole-cards-display\">${choice.display}</div>\n          ${choice.hint ? `<div class=\"hint\">${choice.hint}</div>` : ''}\n        `;\n        button.addEventListener('click', () => {\n          this.submitAnswer(choice.value);\n        });\n        choicesGrid.appendChild(button);\n      }\n    }\n    \n    this.addStyles();\n  }\n  \n  protected renderGame(): void {\n    // Level-specific UI setup\n  }\n  \n  protected checkAnswer(answer: any, correctAnswer: any): boolean {\n    // Check if the hole cards match\n    const answerCards = answer as [string, string];\n    const correctStr = correctAnswer as string;\n    const correctCards = correctStr.split(',') as [string, string];\n    \n    return (answerCards[0] === correctCards[0] && answerCards[1] === correctCards[1]) ||\n           (answerCards[0] === correctCards[1] && answerCards[1] === correctCards[0]);\n  }\n  \n  protected handleAnswerFeedback(isCorrect: boolean, _answer: any): void {\n    const buttons = this.container?.querySelectorAll('.hole-cards-btn');\n    buttons?.forEach(btn => {\n      const button = btn as HTMLButtonElement;\n      button.disabled = true;\n    });\n    \n    if (!isCorrect) {\n      this.state.mistakes++;\n      \n      // Check if level failed\n      if (this.state.mistakes > 0 && this.currentLevel !== 'level1') {\n        this.handleLevelFailure();\n        return;\n      }\n    }\n    \n    // Show feedback - look in game-area since that's where it's rendered\n    const gameArea = this.container?.querySelector('#game-area');\n    const feedback = gameArea?.querySelector('#feedback') as HTMLElement;\n    \n    if (feedback) {\n      feedback.style.display = 'block';\n      feedback.className = `feedback ${isCorrect ? 'correct' : 'incorrect'}`;\n      feedback.textContent = isCorrect ? '✓ Correct!' : '✗ Incorrect';\n    }\n  }\n  \n  private handleLevelFailure(): void {\n    // Show failure modal and restart level\n    this.endGame();\n  }\n  \n  protected endGame(): void {\n    if (this.state.score === 15) {\n      // Perfect score - advance to next level\n      markLevelCompleted(`the-nuts-${this.currentLevel}`);\n      \n      if (this.currentLevel === 'level1') {\n        this.currentLevel = 'level2';\n      } else if (this.currentLevel === 'level2') {\n        this.currentLevel = 'level3';\n      }\n    }\n    \n    super.endGame();\n  }\n  \n  private addStyles(): void {\n    if (document.getElementById('the-nuts-styles')) return;\n    \n    const style = document.createElement('style');\n    style.id = 'the-nuts-styles';\n    style.textContent = `\n      .level-indicator {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 20px;\n      }\n      \n      .level-badge {\n        background: #C73E9A;\n        color: white;\n        padding: 5px 15px;\n        border-radius: 20px;\n        font-weight: bold;\n      }\n      \n      .board-section {\n        text-align: center;\n        margin: 30px 0;\n      }\n      \n      .community-cards {\n        display: flex;\n        justify-content: center;\n        gap: 10px;\n        margin: 20px 0;\n      }\n      \n      .question {\n        text-align: center;\n        font-size: 1.1em;\n        color: #666;\n        margin: 20px 0;\n      }\n      \n      .choices-grid {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        gap: 15px;\n        max-width: 500px;\n        margin: 0 auto;\n      }\n      \n      .hole-cards-btn {\n        padding: 15px;\n        border: 2px solid #C73E9A;\n        border-radius: 10px;\n        background: white;\n        cursor: pointer;\n        transition: all 0.3s;\n      }\n      \n      .hole-cards-btn:hover:not(:disabled) {\n        transform: translateY(-3px);\n        box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n      }\n      \n      .hole-cards-display {\n        font-size: 1.3em;\n        font-weight: bold;\n        color: #333;\n      }\n      \n      .hint {\n        font-size: 0.9em;\n        color: #666;\n        margin-top: 5px;\n      }\n      \n      @media (max-width: 600px) {\n        .choices-grid {\n          grid-template-columns: 1fr;\n        }\n      }\n    `;\n    \n    document.head.appendChild(style);\n  }\n}"],"names":["TheNuts","BaseGame","constructor","level","super","name","difficulty","rounds","timeLimit","description","instructions","this","currentLevel","getCompletedLevels","shouldUseSeed","getSeed","levelOffset","getHourlySeed","generateScenarios","scenarios","deck","generateDeck","shuffled","i","config","scenario","generateLevelScenario","push","generateLevel1Scenario","generateLevel2Scenario","generateLevel3Scenario","shuffleDeck","communityCards","slice","remainingDeck","nuts","findTheNuts","choices","id","display","formatHoleCards","holeCards","value","handStrength","hint","strengthTargets","target","decoy","generateDecoyHand","map","c","state","currentRound","flop","turn","river","shuffleArray","correctAnswer","join","findTheNutsWithSolver","targetStrength","usedHoleCards","availableCards","filter","card","some","used","includes","candidates","Math","min","length","j","allCards","bestHand","findBestHand","strength","estimateHandStrength","sort","a","b","abs","selected","lowerDesc","toLowerCase","renderScenario","currentScenario","container","gameArea","querySelector","cards","innerHTML","toUpperCase","totalRounds","renderCards","choicesGrid","choice","button","document","createElement","className","addEventListener","submitAnswer","appendChild","addStyles","renderGame","checkAnswer","answer","answerCards","correctCards","split","handleAnswerFeedback","isCorrect","_answer","buttons","querySelectorAll","forEach","btn","disabled","mistakes","handleLevelFailure","feedback","style","textContent","endGame","score","markLevelCompleted","getElementById","head"],"mappings":"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"}