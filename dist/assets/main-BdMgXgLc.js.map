{"version":3,"mappings":"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","names":["Router","constructor","options","this","routes","Map","currentModule","currentPath","useHash","container","document","getElementById","forEach","route","set","path","window","addEventListener","handlePopState","handleInitialNavigation","getPath","location","hash","slice","pathname","getStateKey","saveState","serialize","state","key","sessionStorage","setItem","JSON","stringify","loadState","saved","getItem","parse","removeItem","navigateToPath","navigate","replace","url","history","replaceState","pushState","saveCurrentState","cleanPath","split","get","unmount","title","module","loader","innerHTML","savedState","mount","deserialize","error","getParams","queryIndex","indexOf","URLSearchParams","search","updateParams","params","query","toString","routerInstance","getRouter","RANKS","SUITS","SUIT_SYMBOLS","h","hearts","d","diamonds","c","clubs","s","spades","SUIT_COLORS","config","parseCard","card","match","Error","rank","toUpperCase","suit","toLowerCase","suitSymbol","color","displayRank","cardSuit","suitKey","Object","keys","find","k","cardRank","createCardElement","parsedCard","opts","width","height","fontSize","clickable","selected","faceDown","onClick","className","style","cardDiv","createElement","classList","add","imageName","cursor","dataset","renderCards","cards","containerEl","index","cardOpts","appendChild","generateDeck","deck","push","shuffled","shuffleDeck","seed","newDeck","random","createSeededRandom","Math","i","length","j","floor","formatHoleCards","holeCards","separator","colored","map","parsed","display","join","injectDefaultStyles","id","textContent","head","injectCardStyles","HomePage","querySelectorAll","link","e","preventDefault","router","FoundationGames","currentGame","currentGameType","gameParam","querySelector","async","gameType","game","launchGame","gameState","GameClass","NameThatHand","__vitePreload","import","__VITE_PRELOAD__","HandVsHand","BestFiveFromSeven","gameMount","start","message","TheNuts","setTimeout"],"ignoreList":[],"sources":["../../src/lib/router.ts","../../src/lib/cards.ts","../../index-vite.html?html-proxy&index=1.js"],"sourcesContent":["import { GameModule, Route, RouterOptions, GameState } from '../types/router.js';\n\nexport class Router {\n  private routes: Map<string, Route> = new Map();\n  private currentModule: GameModule | null = null;\n  private currentPath: string = '';\n  private container: HTMLElement;\n  private useHash: boolean;\n  \n  constructor(options: RouterOptions) {\n    this.useHash = options.useHash ?? false;\n    this.container = options.container ?? document.getElementById('app')!;\n    \n    // Register routes\n    options.routes.forEach(route => {\n      this.routes.set(route.path, route);\n    });\n    \n    // Listen for browser navigation\n    window.addEventListener('popstate', () => this.handlePopState());\n    \n    // Handle initial navigation\n    this.handleInitialNavigation();\n  }\n  \n  private getPath(): string {\n    if (this.useHash) {\n      return window.location.hash.slice(1) || '/';\n    }\n    return window.location.pathname;\n  }\n  \n  private getStateKey(): string {\n    return `game-state-${this.currentPath}`;\n  }\n  \n  private saveState(): void {\n    if (this.currentModule && this.currentModule.serialize) {\n      const state = this.currentModule.serialize();\n      const key = this.getStateKey();\n      sessionStorage.setItem(key, JSON.stringify(state));\n    }\n  }\n  \n  private loadState(): GameState | undefined {\n    const key = this.getStateKey();\n    const saved = sessionStorage.getItem(key);\n    if (saved) {\n      try {\n        return JSON.parse(saved);\n      } catch {\n        sessionStorage.removeItem(key);\n      }\n    }\n    return undefined;\n  }\n  \n  private async handlePopState(): Promise<void> {\n    await this.navigateToPath(this.getPath(), false);\n  }\n  \n  private async handleInitialNavigation(): Promise<void> {\n    const path = this.getPath();\n    await this.navigateToPath(path, false);\n  }\n  \n  async navigate(path: string, replace: boolean = false): Promise<void> {\n    // Save current state before navigating away\n    this.saveState();\n    \n    // Update browser history\n    const url = this.useHash ? `#${path}` : path;\n    if (replace) {\n      window.history.replaceState({ path }, '', url);\n    } else {\n      window.history.pushState({ path }, '', url);\n    }\n    \n    await this.navigateToPath(path, false);\n  }\n  \n  private async navigateToPath(path: string, saveCurrentState: boolean = true): Promise<void> {\n    // Clean up path\n    const cleanPath = path.split('?')[0].split('#')[0];\n    \n    // Find matching route\n    const route = this.routes.get(cleanPath) || this.routes.get('/');\n    if (!route) {\n      console.error(`No route found for path: ${cleanPath}`);\n      return;\n    }\n    \n    // Save current game state if needed\n    if (saveCurrentState) {\n      this.saveState();\n    }\n    \n    // Unmount current module\n    if (this.currentModule && this.currentModule.unmount) {\n      this.currentModule.unmount();\n    }\n    \n    // Update current path\n    this.currentPath = cleanPath;\n    \n    // Update page title\n    document.title = route.title;\n    \n    // Load and mount new module\n    try {\n      const module = await route.loader();\n      this.currentModule = module;\n      \n      // Clear container\n      this.container.innerHTML = '';\n      \n      // Try to restore state\n      const savedState = this.loadState();\n      \n      // Mount the new module\n      module.mount(this.container, savedState);\n      \n      // If we have saved state, deserialize it\n      if (savedState && module.deserialize) {\n        module.deserialize(savedState);\n      }\n    } catch (error) {\n      console.error(`Failed to load route ${cleanPath}:`, error);\n      this.container.innerHTML = '<h1>Error loading game</h1>';\n    }\n  }\n  \n  // Helper to get URL params\n  getParams(): URLSearchParams {\n    if (this.useHash) {\n      const hash = window.location.hash.slice(1);\n      const queryIndex = hash.indexOf('?');\n      if (queryIndex !== -1) {\n        return new URLSearchParams(hash.slice(queryIndex + 1));\n      }\n      return new URLSearchParams();\n    }\n    return new URLSearchParams(window.location.search);\n  }\n  \n  // Update URL params without navigation\n  updateParams(params: Record<string, string>): void {\n    const searchParams = new URLSearchParams(params);\n    const query = searchParams.toString();\n    const path = this.currentPath + (query ? `?${query}` : '');\n    const url = this.useHash ? `#${path}` : path;\n    window.history.replaceState({ path: this.currentPath }, '', url);\n  }\n}\n\n// Export singleton instance helper\nlet routerInstance: Router | null = null;\n\nexport function initRouter(options: RouterOptions): Router {\n  if (routerInstance) {\n    console.warn('Router already initialized');\n    return routerInstance;\n  }\n  routerInstance = new Router(options);\n  return routerInstance;\n}\n\nexport function getRouter(): Router | null {\n  return routerInstance;\n}","/**\n * Cards Library for Poker Training Games\n * Provides consistent card rendering, deck utilities, and display formatting\n */\n\nimport type { Card, CardOptions, DeckOptions, Rank, Suit, SuitSymbol, CardColor } from '../types/cards.js';\n\nexport const RANKS: readonly Rank[] = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'] as const;\nexport const SUITS: readonly Suit[] = ['h', 'd', 'c', 's'] as const;\n\nexport const SUIT_SYMBOLS: Record<string, SuitSymbol> = {\n  'h': '♥', 'hearts': '♥', '♥': '♥',\n  'd': '♦', 'diamonds': '♦', '♦': '♦',\n  'c': '♣', 'clubs': '♣', '♣': '♣',\n  's': '♠', 'spades': '♠', '♠': '♠'\n} as const;\n\nexport const SUIT_COLORS: Record<string, CardColor> = {\n  'h': 'red', 'hearts': 'red', '♥': 'red',\n  'd': 'red', 'diamonds': 'red', '♦': 'red',\n  'c': 'black', 'clubs': 'black', '♣': 'black',\n  's': 'black', 'spades': 'black', '♠': 'black'\n} as const;\n\nexport const SUIT_NAMES: Record<string, string> = {\n  'h': 'hearts', '♥': 'hearts',\n  'd': 'diamonds', '♦': 'diamonds',\n  'c': 'clubs', '♣': 'clubs',\n  's': 'spades', '♠': 'spades'\n} as const;\n\ninterface CardConfig {\n  useImages: boolean;\n  imagePath: string;\n  imageFormat: string;\n  defaultWidth: number;\n  defaultHeight: number;\n  defaultFontSize: number;\n}\n\nlet config: CardConfig = {\n  useImages: true,\n  imagePath: 'images/cards/',\n  imageFormat: 'png',\n  defaultWidth: 85,\n  defaultHeight: 120,\n  defaultFontSize: 28\n};\n\n/**\n * Configure the cards library\n */\nexport function configure(options: Partial<CardConfig>): void {\n  config = { ...config, ...options };\n}\n\n/**\n * Parse card from various formats\n */\nexport function parseCard(card: string | Partial<Card>): Card {\n  if (typeof card === 'string') {\n    const match = card.match(/^(10|[2-9TJQKA])([hdcs])$/i);\n    if (!match) {\n      throw new Error(`Invalid card format: ${card}`);\n    }\n    const rank = (match[1].toUpperCase() === '10' ? 'T' : match[1].toUpperCase()) as Rank;\n    const suit = match[2].toLowerCase() as Suit;\n    \n    return {\n      rank,\n      suit,\n      suitSymbol: SUIT_SYMBOLS[suit],\n      color: SUIT_COLORS[suit],\n      displayRank: rank === 'T' ? '10' : rank,\n      toString: () => `${rank}${suit}`\n    };\n  } else if (typeof card === 'object' && card.rank && card.suit) {\n    const cardSuit = card.suit as string;\n    const suit = cardSuit.toLowerCase() as Suit;\n    const suitKey = SUIT_SYMBOLS[suit] ? suit : \n                  (Object.keys(SUIT_SYMBOLS).find(k => SUIT_SYMBOLS[k] === cardSuit) || suit) as Suit;\n    \n    const cardRank = card.rank as string;\n    const rank = (cardRank === '10' ? 'T' : cardRank) as Rank;\n    \n    return {\n      rank,\n      suit: suitKey,\n      suitSymbol: SUIT_SYMBOLS[suitKey] || (cardSuit as SuitSymbol),\n      color: SUIT_COLORS[suitKey] || 'black',\n      displayRank: rank === 'T' ? '10' : rank,\n      toString: () => `${rank}${suitKey}`\n    };\n  }\n  throw new Error('Invalid card format');\n}\n\n/**\n * Create a card DOM element\n */\nexport function createCardElement(card: string | Card, options: CardOptions = {}): HTMLElement {\n  const parsedCard = parseCard(card);\n  const opts = {\n    width: config.defaultWidth,\n    height: config.defaultHeight,\n    fontSize: config.defaultFontSize,\n    clickable: false,\n    selected: false,\n    faceDown: false,\n    onClick: undefined,\n    className: '',\n    style: 'simple' as const,\n    ...options\n  };\n\n  const cardDiv = document.createElement('div');\n  cardDiv.className = `card ${parsedCard.color} ${opts.className}`;\n  if (opts.selected) cardDiv.classList.add('selected');\n  if (opts.faceDown) cardDiv.classList.add('face-down');\n  if (opts.clickable) cardDiv.classList.add('clickable');\n  \n  cardDiv.style.width = `${opts.width}px`;\n  cardDiv.style.height = `${opts.height}px`;\n  cardDiv.style.fontSize = `${opts.fontSize}px`;\n\n  if (opts.faceDown) {\n    cardDiv.innerHTML = config.useImages ? \n      `<img src=\"${config.imagePath}back.${config.imageFormat}\" alt=\"Card back\" />` :\n      '<div class=\"card-back\">🂠</div>';\n  } else if (config.useImages) {\n    const imageName = `${parsedCard.rank}${parsedCard.suit}`;\n    cardDiv.innerHTML = `<img src=\"${config.imagePath}${imageName}.${config.imageFormat}\" \n                              alt=\"${parsedCard.displayRank}${parsedCard.suitSymbol}\" />`;\n  } else {\n    if (opts.style === 'detailed') {\n      cardDiv.innerHTML = `\n        <div class=\"card-rank\">${parsedCard.displayRank}</div>\n        <div class=\"card-suit\">${parsedCard.suitSymbol}</div>\n      `;\n    } else {\n      cardDiv.textContent = `${parsedCard.displayRank}${parsedCard.suitSymbol}`;\n    }\n  }\n\n  if (opts.clickable && opts.onClick) {\n    cardDiv.style.cursor = 'pointer';\n    cardDiv.addEventListener('click', () => opts.onClick!(parsedCard, 0));\n  }\n\n  cardDiv.dataset.rank = parsedCard.rank;\n  cardDiv.dataset.suit = parsedCard.suit;\n  cardDiv.dataset.card = parsedCard.toString();\n\n  return cardDiv;\n}\n\n/**\n * Render multiple cards into a container\n */\nexport function renderCards(\n  cards: (string | Card)[], \n  container: HTMLElement | string, \n  options: CardOptions = {}\n): void {\n  const containerEl = typeof container === 'string' ? \n    document.getElementById(container) : container;\n  \n  if (!containerEl) {\n    throw new Error('Container element not found');\n  }\n  \n  containerEl.innerHTML = '';\n  cards.forEach((card, index) => {\n    const cardOpts = { \n      ...options, \n      onClick: options.onClick ? () => options.onClick!(card, index) : undefined \n    };\n    containerEl.appendChild(createCardElement(card, cardOpts));\n  });\n}\n\n/**\n * Generate a standard 52-card deck\n */\nexport function generateDeck(options: DeckOptions = {}): string[] {\n  const deck: string[] = [];\n  for (const rank of RANKS) {\n    for (const suit of SUITS) {\n      deck.push(rank + suit);\n    }\n  }\n\n  if (options.shuffled) {\n    return shuffleDeck(deck, options.seed);\n  }\n\n  return deck;\n}\n\n/**\n * Shuffle a deck with optional seed\n */\nexport function shuffleDeck<T>(deck: T[], seed: number | null = null): T[] {\n  const newDeck = [...deck];\n  const random = seed !== null ? createSeededRandom(seed) : Math.random;\n  \n  for (let i = newDeck.length - 1; i > 0; i--) {\n    const j = Math.floor(random() * (i + 1));\n    [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];\n  }\n  \n  return newDeck;\n}\n\n/**\n * Create seeded random number generator\n */\nfunction createSeededRandom(seed: number): () => number {\n  let s = seed;\n  return function() {\n    s = (s * 9301 + 49297) % 233280;\n    return s / 233280;\n  };\n}\n\n/**\n * Format card notation for display with colored HTML\n */\nexport function formatCardsInText(text: string): string {\n  return text.replace(\n    /(^|[^a-zA-Z])([2-9TJQKA]|10)([hdcs])\\b/gi, \n    (_match, prefix, rank, suit) => {\n      const suitLower = suit.toLowerCase() as Suit;\n      const suitSymbol = SUIT_SYMBOLS[suitLower];\n      const colorClass = SUIT_COLORS[suitLower] === 'red' ? 'card-heart' : 'card-spade';\n      const displayRank = rank === 'T' ? '10' : rank;\n      return `${prefix}<span class=\"${colorClass}\">${displayRank}${suitSymbol}</span>`;\n    }\n  );\n}\n\n/**\n * Format hole cards for display\n */\nexport function formatHoleCards(\n  holeCards: [string, string] | [Card, Card], \n  options: { separator?: string; colored?: boolean } = {}\n): string {\n  const opts = { separator: ' ', colored: true, ...options };\n\n  const cards = holeCards.map(card => {\n    const parsed = parseCard(card);\n    const display = `${parsed.displayRank}${parsed.suitSymbol}`;\n    \n    if (opts.colored) {\n      const colorClass = parsed.color === 'red' ? 'card-heart' : 'card-spade';\n      return `<span class=\"${colorClass}\">${display}</span>`;\n    }\n    return display;\n  });\n\n  return cards.join(opts.separator);\n}\n\n/**\n * Compare two cards for sorting\n */\nexport function compareCards(a: string | Card, b: string | Card): number {\n  const cardA = parseCard(a);\n  const cardB = parseCard(b);\n  \n  const rankA = RANKS.indexOf(cardA.rank);\n  const rankB = RANKS.indexOf(cardB.rank);\n  \n  if (rankA !== rankB) {\n    return rankB - rankA; // Higher rank first\n  }\n  \n  const suitOrder: Suit[] = ['s', 'h', 'd', 'c'];\n  return suitOrder.indexOf(cardA.suit) - suitOrder.indexOf(cardB.suit);\n}\n\n/**\n * Sort an array of cards\n */\nexport function sortCards(\n  cards: (string | Card)[], \n  descending: boolean = true\n): (string | Card)[] {\n  const sorted = [...cards].sort(compareCards);\n  return descending ? sorted : sorted.reverse();\n}\n\n/**\n * Get card image filename\n */\nexport function getCardImageName(card: string | Card): string {\n  const parsed = parseCard(card);\n  return `${parsed.rank}${parsed.suit}.${config.imageFormat}`;\n}\n\n/**\n * Deck class for managing a deck of cards\n */\nexport class Deck {\n  private cards: string[] = [];\n  private dealtCards: string[] = [];\n  private options: DeckOptions;\n\n  constructor(options: DeckOptions = {}) {\n    this.options = { shuffled: true, ...options };\n    this.reset();\n  }\n\n  reset(): void {\n    this.cards = generateDeck({\n      shuffled: this.options.shuffled,\n      seed: this.options.seed\n    });\n    this.dealtCards = [];\n  }\n\n  shuffle(seed: number | null = null): void {\n    this.cards = shuffleDeck(this.cards, seed);\n  }\n\n  deal(count: number = 1): string | string[] {\n    const dealt: string[] = [];\n    for (let i = 0; i < count && this.cards.length > 0; i++) {\n      const card = this.cards.pop()!;\n      dealt.push(card);\n      this.dealtCards.push(card);\n    }\n    return count === 1 ? dealt[0] : dealt;\n  }\n\n  cardsRemaining(): number {\n    return this.cards.length;\n  }\n\n  getDealtCards(): string[] {\n    return [...this.dealtCards];\n  }\n}\n\n/**\n * Get default CSS styles for cards\n */\nexport function getDefaultStyles(): string {\n  return `\n    .card, .playing-card {\n      display: inline-block;\n      background: white;\n      border: 2px solid #333;\n      border-radius: 8px;\n      margin: 5px;\n      position: relative;\n      font-weight: bold;\n      text-align: center;\n      line-height: 100px;\n      cursor: default;\n      transition: transform 0.2s;\n      user-select: none;\n      box-sizing: border-box;\n    }\n    \n    .card.clickable {\n      cursor: pointer;\n    }\n    \n    .card:hover.clickable {\n      transform: translateY(-5px);\n    }\n    \n    .card.selected {\n      border-color: #667eea;\n      box-shadow: 0 0 20px rgba(102, 126, 234, 0.5);\n      transform: translateY(-10px);\n    }\n    \n    .card.red {\n      color: #dc3545;\n    }\n    \n    .card.black {\n      color: #212529;\n    }\n    \n    .card.face-down {\n      background: linear-gradient(45deg, #667eea 25%, #764ba2 75%);\n      color: white;\n    }\n    \n    .card .card-rank {\n      font-size: 1.3em;\n      font-weight: 700;\n      line-height: 1.2;\n      margin-top: 20%;\n    }\n    \n    .card .card-suit {\n      font-size: 1.1em;\n      margin-top: 5px;\n    }\n    \n    .card-back {\n      font-size: 2em;\n      line-height: inherit;\n    }\n    \n    .card-heart, .card-diamond {\n      color: #dc3545;\n      font-weight: 600;\n    }\n    \n    .card-spade, .card-club {\n      color: #212529;\n      font-weight: 600;\n    }\n    \n    .card img, .playing-card img {\n      width: 100%;\n      height: 100%;\n      object-fit: contain;\n      display: block;\n      border-radius: 6px;\n    }\n    \n    .cards-container, .cards-display, .community-cards {\n      display: flex;\n      justify-content: center;\n      gap: 10px;\n      margin: 20px 0;\n      flex-wrap: wrap;\n    }\n    \n    .hole-cards-btn {\n      background: white;\n      border: 2px solid #667eea;\n      border-radius: 10px;\n      padding: 15px 20px;\n      cursor: pointer;\n      transition: all 0.2s;\n      font-size: 1.1em;\n    }\n    \n    .hole-cards-btn:hover {\n      background: #f3f4f6;\n      transform: translateY(-2px);\n      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);\n    }\n    \n    .hole-cards-btn .hint {\n      font-size: 0.85em;\n      color: #6b7280;\n      margin-top: 5px;\n    }\n  `;\n}\n\n/**\n * Inject default styles into the document\n */\nexport function injectDefaultStyles(): void {\n  if (document.getElementById('cards-default-styles')) return;\n  \n  const style = document.createElement('style');\n  style.id = 'cards-default-styles';\n  style.textContent = getDefaultStyles();\n  document.head.appendChild(style);\n}","\n    import { initRouter, getRouter } from './src/lib/router.ts';\n    import { injectDefaultStyles as injectCardStyles } from './src/lib/cards.ts';\n    \n    // Inject card styles globally\n    injectCardStyles();\n    \n    // Home page component\n    class HomePage {\n      mount(container) {\n        container.innerHTML = `\n          <div class=\"home-container\">\n            <h1 class=\"home-title\">🎯 Poker Training Games</h1>\n            <p class=\"home-subtitle\">Master poker from foundation to advanced</p>\n            \n            <div class=\"game-grid\">\n              <a href=\"#\" class=\"game-card\" data-route=\"/foundation\">\n                <span class=\"level-badge level-foundation\">Foundation</span>\n                <h2 class=\"game-title\">Talk the Talk</h2>\n                <p class=\"game-description\">Learn the basic foundational lingo of poker with three training games.</p>\n              </a>\n              \n              <a href=\"#\" class=\"game-card disabled\">\n                <span class=\"level-badge level-beginner\">Beginner</span>\n                <h2 class=\"game-title\">Community Cards</h2>\n                <p class=\"game-description\">Understand how community cards work in Texas Hold'em.</p>\n                <span class=\"coming-soon\">Coming Soon</span>\n              </a>\n              \n              <a href=\"#\" class=\"game-card disabled\">\n                <span class=\"level-badge level-intermediate\">Intermediate</span>\n                <h2 class=\"game-title\">Opponent Awareness</h2>\n                <p class=\"game-description\">Learn to read the board and consider opponent hands.</p>\n                <span class=\"coming-soon\">Coming Soon</span>\n              </a>\n              \n              <a href=\"#\" class=\"game-card\" data-route=\"/the-nuts\">\n                <span class=\"level-badge level-advanced\">Advanced</span>\n                <h2 class=\"game-title\">The Nuts</h2>\n                <p class=\"game-description\">Identify the best possible hand on any board with progressive difficulty.</p>\n              </a>\n            </div>\n          </div>\n        `;\n        \n        // Add click handlers for navigation\n        container.querySelectorAll('[data-route]').forEach(link => {\n          link.addEventListener('click', (e) => {\n            e.preventDefault();\n            const route = link.dataset.route;\n            const router = getRouter();\n            if (router) {\n              router.navigate(route);\n            }\n          });\n        });\n      }\n      \n      serialize() {\n        return {};\n      }\n      \n      deserialize(state) {\n        // No state to restore for home page\n      }\n    }\n    \n    // Foundation games wrapper\n    class FoundationGames {\n      constructor() {\n        this.currentGame = null;\n        this.currentGameType = null;\n      }\n      \n      mount(container, state) {\n        // If we're already showing a game, don't re-launch it\n        if (this.currentGame && this.currentGameType) {\n          const router = getRouter();\n          const params = router?.getParams();\n          const gameParam = params?.get('game');\n          \n          // If the URL still has the game param, don't remount the menu\n          if (gameParam === this.currentGameType) {\n            return;\n          }\n        }\n        \n        // Clean up any existing game\n        if (this.currentGame) {\n          this.currentGame.unmount();\n          this.currentGame = null;\n          this.currentGameType = null;\n        }\n        \n        // Show foundation menu\n        container.innerHTML = `\n          <a href=\"#\" class=\"back-button\" data-route=\"/\">← Back to Main Menu</a>\n          <div class=\"game-container\">\n            <h1 style=\"text-align: center; color: #7D1346; margin-bottom: 10px;\">Talk the Talk</h1>\n            <p style=\"text-align: center; color: #666; margin-bottom: 30px;\">Learn the basic foundational lingo of poker</p>\n            \n            <div class=\"game-grid\">\n              <a href=\"#\" class=\"game-card\" data-game=\"name-that-hand\">\n                <h3 class=\"game-title\">Name That Hand</h3>\n                <p class=\"game-description\">Identify poker hands from 5 cards (30 rounds)</p>\n              </a>\n              \n              <a href=\"#\" class=\"game-card\" data-game=\"hand-vs-hand\">\n                <h3 class=\"game-title\">Hand vs Hand</h3>\n                <p class=\"game-description\">Compare which of two hands wins (10 rounds)</p>\n              </a>\n              \n              <a href=\"#\" class=\"game-card\" data-game=\"best-five\">\n                <h3 class=\"game-title\">Best Five from Seven</h3>\n                <p class=\"game-description\">Select the best 5-card hand from 7 cards (10 rounds)</p>\n              </a>\n            </div>\n          </div>\n        `;\n        \n        // Add navigation handlers\n        container.querySelector('[data-route]').addEventListener('click', (e) => {\n          e.preventDefault();\n          getRouter()?.navigate('/');\n        });\n        \n        // Add game launch handlers\n        container.querySelectorAll('[data-game]').forEach(link => {\n          link.addEventListener('click', async (e) => {\n            e.preventDefault();\n            const gameType = link.dataset.game;\n            await this.launchGame(container, gameType);\n          });\n        });\n        \n        // Check URL params for direct game launch (only if not explicitly cleared)\n        const router = getRouter();\n        if (router && state !== null) {\n          const params = router.getParams();\n          const gameParam = params.get('game');\n          if (gameParam && !state?.currentGameType) {\n            this.launchGame(container, gameParam);\n            return;\n          }\n        }\n        \n        // If we have saved state with a game, restore it\n        if (state && state.currentGameType) {\n          this.launchGame(container, state.currentGameType, state.gameState);\n        }\n      }\n      \n      async launchGame(container, gameType, savedState) {\n        // Show animated loading screen\n        container.innerHTML = `\n          <div class=\"game-container\" style=\"min-height: 400px; display: flex; align-items: center; justify-content: center;\">\n            <div style=\"text-align: center;\">\n              <div style=\"font-size: 48px; margin-bottom: 20px;\">🃏</div>\n              <div style=\"font-size: 24px; color: #7D1346; font-weight: 600;\">Loading game...</div>\n              <div style=\"font-size: 14px; color: #666; margin-top: 10px;\">Shuffling the deck...</div>\n            </div>\n          </div>\n        `;\n        \n        try {\n          let GameClass;\n          switch (gameType) {\n            case 'name-that-hand':\n              const { NameThatHand } = await import('./src/games/foundation/NameThatHand.ts');\n              GameClass = NameThatHand;\n              break;\n            case 'hand-vs-hand':\n              const { HandVsHand } = await import('./src/games/foundation/HandVsHand.ts');\n              GameClass = HandVsHand;\n              break;\n            case 'best-five':\n              const { BestFiveFromSeven } = await import('./src/games/foundation/BestFiveFromSeven.ts');\n              GameClass = BestFiveFromSeven;\n              break;\n            default:\n              throw new Error('Unknown game type');\n          }\n          \n          this.currentGameType = gameType;\n          this.currentGame = new GameClass();\n          \n          // Update URL to reflect the game\n          const router = getRouter();\n          if (router) {\n            router.updateParams({ game: gameType });\n          }\n          \n          // Add back button\n          container.innerHTML = `\n            <a href=\"#\" class=\"back-button\" data-back>← Back to Foundation Games</a>\n            <div class=\"game-container\" id=\"game-mount\"></div>\n          `;\n          \n          container.querySelector('[data-back]').addEventListener('click', (e) => {\n            e.preventDefault();\n            // Clean up current game\n            if (this.currentGame) {\n              this.currentGame.unmount();\n              this.currentGame = null;\n              this.currentGameType = null;\n            }\n            // Clear the game param and re-mount the menu\n            if (router) {\n              router.updateParams({});\n            }\n            // Re-mount the foundation games menu\n            this.mount(container, null);\n          });\n          \n          const gameMount = container.querySelector('#game-mount');\n          this.currentGame.mount(gameMount, savedState);\n          \n          // Start the game - this is required for the game to begin\n          this.currentGame.start();\n        } catch (error) {\n          console.error('Failed to load game:', error);\n          container.innerHTML = '<div class=\"error\">Failed to load game: ' + error.message + '</div>';\n        }\n      }\n      \n      unmount() {\n        if (this.currentGame) {\n          this.currentGame.unmount();\n          this.currentGame = null;\n          this.currentGameType = null;\n        }\n      }\n      \n      serialize() {\n        if (this.currentGame) {\n          return {\n            currentGameType: this.currentGameType,\n            gameState: this.currentGame.serialize()\n          };\n        }\n        return {};\n      }\n      \n      deserialize(state) {\n        // Handled in mount\n      }\n    }\n    \n    // Initialize router\n    const router = initRouter({\n      useHash: true, // Use hash routing for GitHub Pages compatibility\n      container: document.getElementById('app'),\n      routes: [\n        {\n          path: '/',\n          title: 'Poker Training Games',\n          loader: async () => new HomePage()\n        },\n        {\n          path: '/foundation',\n          title: 'Foundation Games - Talk the Talk',\n          loader: async () => new FoundationGames()\n        },\n        {\n          path: '/the-nuts',\n          title: 'The Nuts - Advanced',\n          loader: async () => {\n            const { TheNuts } = await import('./src/games/advanced/TheNuts.ts');\n            const game = new TheNuts();\n            \n            // Wrap the game to add back button\n            return {\n              mount(container, state) {\n                // Show loading screen immediately\n                container.innerHTML = `\n                  <a href=\"#\" class=\"back-button\" data-route=\"/\">← Back to Main Menu</a>\n                  <div class=\"game-container\" id=\"the-nuts-mount\" style=\"min-height: 400px;\">\n                    <div class=\"game-loading\">\n                      <div class=\"loading-spinner\">\n                        <div class=\"loading-card\"></div>\n                        <div class=\"loading-card\"></div>\n                        <div class=\"loading-card\"></div>\n                        <div class=\"loading-card\"></div>\n                      </div>\n                      <div class=\"loading-text\">Preparing The Nuts...</div>\n                      <div class=\"loading-subtext\">Shuffling the deck...</div>\n                    </div>\n                  </div>\n                `;\n                \n                container.querySelector('[data-route]').addEventListener('click', (e) => {\n                  e.preventDefault();\n                  getRouter()?.navigate('/');\n                });\n                \n                // Delay game mount to show loading animation\n                setTimeout(() => {\n                  const gameMount = container.querySelector('#the-nuts-mount');\n                  game.mount(gameMount, state);\n                  game.start();\n                }, 500);\n              },\n              \n              unmount() {\n                game.unmount();\n              },\n              \n              serialize() {\n                return game.serialize();\n              },\n              \n              deserialize(state) {\n                game.deserialize(state);\n              }\n            };\n          }\n        }\n      ]\n    });\n  "],"file":"assets/main-BdMgXgLc.js"}