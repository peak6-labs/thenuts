const n=window.Hand;function t(n){return n.charAt(0).toUpperCase()+n.charAt(1).toLowerCase()}function r(r){const e=r.map(t);return n.solve(e)}function e(t,e){const s=r(t),o=r(e),c=n.winners([s,o]);return 2===c.length?0:c[0]===s?1:-1}function s(n){return r(n).descr}function o(t){if(t.length<=5){return{cards:t,description:r(t).descr}}const e=[];for(let n=0;n<t.length-4;n++)for(let r=n+1;r<t.length-3;r++)for(let s=r+1;s<t.length-2;s++)for(let o=s+1;o<t.length-1;o++)for(let c=o+1;c<t.length;c++)e.push([t[n],t[r],t[s],t[o],t[c]]);const s=e.map(n=>({cards:n,hand:r(n)})).sort((t,r)=>{const e=n.winners([t.hand,r.hand]);return 2===e.length?0:e[0]===t.hand?-1:1})[0];return{cards:s.cards,description:s.hand.descr}}function c(t,e){let s=null,c=["",""];for(let a=0;a<e.length-1;a++)for(let l=a+1;l<e.length;l++){const d=[e[a],e[l]],h=o([...t,...d]);if(s){const t=r(s.cards),e=r(h.cards),o=n.winners([t,e]);1===o.length&&o[0]===e&&(s=h,c=d)}else s=h,c=d}return{holeCards:c,description:s?.description||"High Card"}}export{c as a,e as c,o as f,s as g};
//# sourceMappingURL=pokersolver-wrapper-RbdFFWZ_.js.map
