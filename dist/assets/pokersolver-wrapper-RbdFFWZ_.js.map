{"version":3,"file":"pokersolver-wrapper-RbdFFWZ_.js","sources":["../../src/lib/pokersolver-wrapper.ts"],"sourcesContent":["/**\n * Wrapper for pokersolver library to provide proper hand evaluation\n */\n\n// Access pokersolver from global scope (loaded via CDN)\ndeclare global {\n  interface Window {\n    Hand: any;\n  }\n}\n\nconst Hand = (window as any).Hand;\n\n/**\n * Convert our card format to pokersolver format\n * Our format: \"Ah\", \"Td\", \"9c\"\n * Pokersolver format: same but expects uppercase suits\n */\nfunction toPokerSolverFormat(card: string): string {\n  // Replace T with 10 if needed, though pokersolver accepts both\n  return card.charAt(0).toUpperCase() + card.charAt(1).toLowerCase();\n}\n\n/**\n * Evaluate a poker hand using pokersolver\n * Returns the hand with all evaluation data\n */\nexport function evaluateHandWithSolver(cards: string[]) {\n  const formattedCards = cards.map(toPokerSolverFormat);\n  return Hand.solve(formattedCards);\n}\n\n/**\n * Compare two hands and determine the winner\n * Returns: 1 if hand1 wins, -1 if hand2 wins, 0 if tie\n */\nexport function compareHandsWithSolver(hand1: string[], hand2: string[]): number {\n  const solved1 = evaluateHandWithSolver(hand1);\n  const solved2 = evaluateHandWithSolver(hand2);\n  \n  const winners = Hand.winners([solved1, solved2]);\n  \n  if (winners.length === 2) {\n    return 0; // Tie\n  } else if (winners[0] === solved1) {\n    return 1; // Hand 1 wins\n  } else {\n    return -1; // Hand 2 wins\n  }\n}\n\n/**\n * Get hand description from pokersolver evaluation\n */\nexport function getHandDescription(cards: string[]): string {\n  const hand = evaluateHandWithSolver(cards);\n  return hand.descr;\n}\n\n/**\n * Find the best 5-card hand from 7 cards (Texas Hold'em style)\n */\nexport function findBestHand(cards: string[]): { cards: string[], description: string } {\n  if (cards.length <= 5) {\n    const hand = evaluateHandWithSolver(cards);\n    return {\n      cards: cards, // Return original cards, not reconstructed ones\n      description: hand.descr\n    };\n  }\n  \n  // Generate all combinations of 5 cards from the 7\n  const combinations: string[][] = [];\n  for (let i = 0; i < cards.length - 4; i++) {\n    for (let j = i + 1; j < cards.length - 3; j++) {\n      for (let k = j + 1; k < cards.length - 2; k++) {\n        for (let l = k + 1; l < cards.length - 1; l++) {\n          for (let m = l + 1; m < cards.length; m++) {\n            combinations.push([cards[i], cards[j], cards[k], cards[l], cards[m]]);\n          }\n        }\n      }\n    }\n  }\n  \n  // Evaluate all combinations\n  const evaluatedHands = combinations.map(combo => ({\n    cards: combo,\n    hand: evaluateHandWithSolver(combo)\n  }));\n  \n  // Find the best hand\n  const sorted = evaluatedHands.sort((a, b) => {\n    const winners = Hand.winners([a.hand, b.hand]);\n    if (winners.length === 2) return 0;\n    return winners[0] === a.hand ? -1 : 1;\n  });\n  \n  const best = sorted[0];\n  return {\n    cards: best.cards, // These are the original cards from combinations\n    description: best.hand.descr\n  };\n}\n\n/**\n * Find the nuts (best possible hand) given community cards\n */\nexport function findTheNuts(communityCards: string[], availableCards: string[]): {\n  holeCards: [string, string],\n  description: string\n} {\n  let bestHand = null;\n  let bestHoleCards: [string, string] = ['', ''];\n  \n  // Try all possible 2-card combinations from available cards\n  for (let i = 0; i < availableCards.length - 1; i++) {\n    for (let j = i + 1; j < availableCards.length; j++) {\n      const holeCards: [string, string] = [availableCards[i], availableCards[j]];\n      const allCards = [...communityCards, ...holeCards];\n      const result = findBestHand(allCards);\n      \n      if (!bestHand) {\n        bestHand = result;\n        bestHoleCards = holeCards;\n      } else {\n        // Compare with current best\n        const currentBest = evaluateHandWithSolver(bestHand.cards);\n        const newHand = evaluateHandWithSolver(result.cards);\n        const winners = Hand.winners([currentBest, newHand]);\n        \n        if (winners.length === 1 && winners[0] === newHand) {\n          bestHand = result;\n          bestHoleCards = holeCards;\n        }\n      }\n    }\n  }\n  \n  return {\n    holeCards: bestHoleCards,\n    description: bestHand?.description || 'High Card'\n  };\n}\n\nexport default {\n  evaluateHand: evaluateHandWithSolver,\n  compareHands: compareHandsWithSolver,\n  getHandDescription,\n  findBestHand,\n  findTheNuts\n};"],"names":["Hand","window","toPokerSolverFormat","card","charAt","toUpperCase","toLowerCase","evaluateHandWithSolver","cards","formattedCards","map","solve","compareHandsWithSolver","hand1","hand2","solved1","solved2","winners","length","getHandDescription","descr","findBestHand","description","combinations","i","j","k","l","m","push","best","combo","hand","sort","a","b","findTheNuts","communityCards","availableCards","bestHand","bestHoleCards","holeCards","result","currentBest","newHand"],"mappings":"AAWA,MAAMA,EAAQC,OAAeD,KAO7B,SAASE,EAAoBC,GAE3B,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKC,OAAO,GAAGE,aACvD,CAMO,SAASC,EAAuBC,GACrC,MAAMC,EAAiBD,EAAME,IAAIR,GACjC,OAAOF,EAAKW,MAAMF,EACpB,CAMO,SAASG,EAAuBC,EAAiBC,GACtD,MAAMC,EAAUR,EAAuBM,GACjCG,EAAUT,EAAuBO,GAEjCG,EAAUjB,EAAKiB,QAAQ,CAACF,EAASC,IAEvC,OAAuB,IAAnBC,EAAQC,OACH,EACED,EAAQ,KAAOF,EACjB,GAEA,CAEX,CAKO,SAASI,EAAmBX,GAEjC,OADaD,EAAuBC,GACxBY,KACd,CAKO,SAASC,EAAab,GAC3B,GAAIA,EAAMU,QAAU,EAAG,CAErB,MAAO,CACLV,QACAc,YAHWf,EAAuBC,GAGhBY,MAEtB,CAGA,MAAMG,EAA2B,GACjC,IAAA,IAASC,EAAI,EAAGA,EAAIhB,EAAMU,OAAS,EAAGM,IACpC,IAAA,IAASC,EAAID,EAAI,EAAGC,EAAIjB,EAAMU,OAAS,EAAGO,IACxC,IAAA,IAASC,EAAID,EAAI,EAAGC,EAAIlB,EAAMU,OAAS,EAAGQ,IACxC,IAAA,IAASC,EAAID,EAAI,EAAGC,EAAInB,EAAMU,OAAS,EAAGS,IACxC,IAAA,IAASC,EAAID,EAAI,EAAGC,EAAIpB,EAAMU,OAAQU,IACpCL,EAAaM,KAAK,CAACrB,EAAMgB,GAAIhB,EAAMiB,GAAIjB,EAAMkB,GAAIlB,EAAMmB,GAAInB,EAAMoB,KAQ3E,MAYME,EAZiBP,EAAab,IAAIqB,IAAA,CACtCvB,MAAOuB,EACPC,KAAMzB,EAAuBwB,MAIDE,KAAK,CAACC,EAAGC,KACrC,MAAMlB,EAAUjB,EAAKiB,QAAQ,CAACiB,EAAEF,KAAMG,EAAEH,OACxC,OAAuB,IAAnBf,EAAQC,OAAqB,EAC1BD,EAAQ,KAAOiB,EAAEF,MAAO,EAAK,IAGlB,GACpB,MAAO,CACLxB,MAAOsB,EAAKtB,MACZc,YAAaQ,EAAKE,KAAKZ,MAE3B,CAKO,SAASgB,EAAYC,EAA0BC,GAIpD,IAAIC,EAAW,KACXC,EAAkC,CAAC,GAAI,IAG3C,IAAA,IAAShB,EAAI,EAAGA,EAAIc,EAAepB,OAAS,EAAGM,IAC7C,IAAA,IAASC,EAAID,EAAI,EAAGC,EAAIa,EAAepB,OAAQO,IAAK,CAClD,MAAMgB,EAA8B,CAACH,EAAed,GAAIc,EAAeb,IAEjEiB,EAASrB,EADE,IAAIgB,KAAmBI,IAGxC,GAAKF,EAGE,CAEL,MAAMI,EAAcpC,EAAuBgC,EAAS/B,OAC9CoC,EAAUrC,EAAuBmC,EAAOlC,OACxCS,EAAUjB,EAAKiB,QAAQ,CAAC0B,EAAaC,IAEpB,IAAnB3B,EAAQC,QAAgBD,EAAQ,KAAO2B,IACzCL,EAAWG,EACXF,EAAgBC,EAEpB,MAZEF,EAAWG,EACXF,EAAgBC,CAYpB,CAGF,MAAO,CACLA,UAAWD,EACXlB,YAAaiB,GAAUjB,aAAe,YAE1C"}