{"version":3,"file":"BestFiveFromSeven-Ini4YUrf.js","sources":["../../src/games/foundation/BestFiveFromSeven.ts"],"sourcesContent":["/**\n * Best Five from Seven - Select the best 5-card hand from 7 cards\n */\n\nimport { BaseGame } from '../BaseGame.js';\nimport type { GameScenario, GameConfig } from '../../types/games';\nimport * as Cards from '../../lib/cards.js';\nimport * as Random from '../../lib/random.js';\nimport { findBestHand, getHandDescription } from '../../lib/pokersolver-wrapper.js';\n\ninterface BestFiveScenario extends GameScenario {\n  allCards: string[];\n  bestHand: string[];\n  handName: string;\n  possibleHands: string[][];\n}\n\nexport class BestFiveFromSeven extends BaseGame {\n  protected containerId: string = 'game-container';\n  protected scenarios: BestFiveScenario[] = [];\n  // Override base class currentScenario with more specific type\n  protected declare currentScenario: GameScenario | null;\n  private selectedCards: Set<string> = new Set();\n\n  constructor(config: Partial<GameConfig> = {}) {\n    super({\n      name: 'Best Five from Seven',\n      difficulty: 'foundation',\n      rounds: 10,\n      timeLimit: 45,\n      description: 'Select the best 5-card hand from 7 cards',\n      instructions: ['Look at all 7 cards', 'Click to select 5 cards', 'Submit your selection'],\n      ...config\n    });\n  }\n\n  protected generateScenarios(): GameScenario[] {\n    const scenarios: BestFiveScenario[] = [];\n    \n    // Use seeded random for consistent games\n    Random.setSeed(Random.getHourlySeed() + 100);\n\n    // Ensure variety of hand types (not used currently)\n    // const _targetHands = [\n    //   'straight-flush', 'four-of-a-kind', 'full-house', \n    //   'flush', 'straight', 'three-of-a-kind',\n    //   'two-pair', 'pair', 'high-card', 'flush'\n    // ];\n\n    for (let i = 0; i < this.config.rounds; i++) {\n      let scenario: BestFiveScenario | null = null;\n      let attempts = 0;\n      \n      while (!scenario && attempts < 100) {\n        attempts++;\n        \n        // Generate 7 cards (like Texas Hold'em)\n        const deck = Cards.generateDeck({ shuffled: true });\n        const sevenCards = deck.slice(0, 7);\n        \n        // Find the best 5-card hand from the 7 cards using pokersolver\n        const bestHandResult = findBestHand(sevenCards);\n        \n        // Skip if hand is too weak (high card) after first few rounds\n        if (bestHandResult.description.includes('High Card') && i > 3) continue;\n        \n        scenario = {\n          id: `bf7-${i}`,\n          allCards: sevenCards,\n          bestHand: bestHandResult.cards,\n          handName: bestHandResult.description,\n          possibleHands: [], // Not used anymore\n          choices: [], // Will be the cards themselves\n          correctAnswer: bestHandResult.cards.sort().join(','),\n          explanation: `The best hand is ${bestHandResult.description}`\n        };\n      }\n      \n      if (scenario) {\n        scenarios.push(scenario);\n      }\n    }\n    \n    this.scenarios = scenarios;\n    return scenarios;\n  }\n\n  protected renderScenario(): void {\n    const scenario = this.scenarios[this.state.currentRound || 0] as BestFiveScenario;\n    if (!scenario) return;\n    \n    this.currentScenario = scenario;\n    this.selectedCards.clear();\n    \n    const container = this.container;\n    if (!container) return;\n    \n    // Find or create game area\n    let gameArea = container.querySelector('.game-area') as HTMLElement;\n    if (!gameArea) {\n      gameArea = document.createElement('div');\n      gameArea.className = 'game-area';\n      container.appendChild(gameArea);\n    }\n    \n    gameArea.innerHTML = `\n      <div class=\"instructions\">\n        Select the best 5-card poker hand from these 7 cards\n      </div>\n      \n      <div class=\"seven-cards\" id=\"seven-cards\"></div>\n      \n      <div class=\"selection-info\">\n        <span id=\"cards-selected\">0</span> / 5 cards selected\n      </div>\n      \n      <div class=\"action-buttons\">\n        <button id=\"clear-btn\" class=\"action-btn secondary\">Clear Selection</button>\n        <button id=\"submit-btn\" class=\"action-btn primary\" disabled>Submit Hand</button>\n      </div>\n      \n      <div id=\"selected-display\" class=\"selected-hand\"></div>\n    `;\n    \n    // Render clickable cards\n    const cardsContainer = document.getElementById('seven-cards');\n    if (cardsContainer) {\n      scenario.allCards.forEach((card, _index) => {\n        const cardEl = Cards.createCardElement(card, {\n          width: 85,\n          height: 120,\n          clickable: true,\n          onClick: () => this.toggleCard(card)\n        });\n        cardEl.dataset.cardValue = card;\n        cardsContainer.appendChild(cardEl);\n      });\n    }\n    \n    // Add event listeners\n    const clearBtn = document.getElementById('clear-btn');\n    const submitBtn = document.getElementById('submit-btn');\n    \n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => this.clearSelection());\n    }\n    \n    if (submitBtn) {\n      submitBtn.addEventListener('click', () => this.submitSelection());\n    }\n  }\n\n  private toggleCard(card: string): void {\n    if (this.selectedCards.has(card)) {\n      this.selectedCards.delete(card);\n    } else if (this.selectedCards.size < 5) {\n      this.selectedCards.add(card);\n    }\n    \n    this.updateSelection();\n  }\n\n  private clearSelection(): void {\n    this.selectedCards.clear();\n    this.updateSelection();\n  }\n\n  private updateSelection(): void {\n    // Update card visuals\n    const allCards = document.querySelectorAll('.seven-cards .card');\n    allCards.forEach(cardEl => {\n      const cardValue = (cardEl as HTMLElement).dataset.cardValue;\n      if (cardValue && this.selectedCards.has(cardValue)) {\n        cardEl.classList.add('selected');\n      } else {\n        cardEl.classList.remove('selected');\n      }\n    });\n    \n    // Update counter\n    const counter = document.getElementById('cards-selected');\n    if (counter) {\n      counter.textContent = this.selectedCards.size.toString();\n    }\n    \n    // Update submit button\n    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;\n    if (submitBtn) {\n      submitBtn.disabled = this.selectedCards.size !== 5;\n    }\n    \n    // Show selected hand\n    const display = document.getElementById('selected-display');\n    if (display && this.selectedCards.size === 5) {\n      const selectedArray = Array.from(this.selectedCards);\n      const description = getHandDescription(selectedArray);\n      display.innerHTML = `\n        <div class=\"selected-label\">Your selection:</div>\n        <div class=\"selected-hand-name\">${description}</div>\n      `;\n    } else if (display) {\n      display.innerHTML = '';\n    }\n  }\n\n  private submitSelection(): void {\n    if (!this.currentScenario || this.selectedCards.size !== 5) return;\n    \n    const selectedArray = Array.from(this.selectedCards).sort();\n    const scenario = this.currentScenario as unknown as BestFiveScenario;\n    const correctArray = scenario?.bestHand.sort() || [];\n    \n    const isCorrect = selectedArray.join(',') === correctArray.join(',');\n    \n    this.handleAnswer(isCorrect ? 'correct' : 'incorrect');\n  }\n\n  protected handleAnswer(answerId: string): void {\n    if (!this.currentScenario) return;\n    \n    const isCorrect = answerId === 'correct';\n    \n    // Update score\n    if (isCorrect) {\n      this.state.score++;\n      this.state.streak++;\n    } else {\n      this.state.streak = 0;\n    }\n    \n    // Show feedback\n    this.showFeedback(isCorrect);\n    \n    // Continue after delay\n    setTimeout(() => {\n      if (this.state.currentRound < this.config.rounds - 1) {\n        this.state.currentRound++;\n        this.renderScenario();\n      } else {\n        this.state.isComplete = true;\n      }\n    }, 3000);\n  }\n\n  private showFeedback(isCorrect: boolean): void {\n    if (!this.currentScenario) return;\n    \n    const gameArea = document.querySelector('.game-area');\n    if (!gameArea) return;\n    \n    // Disable interaction\n    const allCards = gameArea.querySelectorAll('.card');\n    allCards.forEach(card => {\n      (card as HTMLElement).style.pointerEvents = 'none';\n    });\n    \n    const buttons = gameArea.querySelectorAll('button');\n    buttons.forEach(btn => {\n      (btn as HTMLButtonElement).disabled = true;\n    });\n    \n    // Highlight correct answer\n    allCards.forEach(cardEl => {\n      const cardValue = (cardEl as HTMLElement).dataset.cardValue;\n      const scenario = this.currentScenario as unknown as BestFiveScenario;\n      if (cardValue && scenario?.bestHand.includes(cardValue)) {\n        cardEl.classList.add('correct-answer');\n      }\n    });\n    \n    // Show result\n    const feedbackDiv = document.createElement('div');\n    feedbackDiv.className = `feedback ${isCorrect ? 'correct' : 'incorrect'}`;\n    feedbackDiv.innerHTML = `\n      <div class=\"feedback-icon\">${isCorrect ? '✓' : '✗'}</div>\n      <div class=\"feedback-text\">\n        ${isCorrect ? 'Correct!' : 'Not quite.'}<br>\n        The best hand was: <strong>${(this.currentScenario as unknown as BestFiveScenario).handName}</strong>\n      </div>\n    `;\n    \n    gameArea.appendChild(feedbackDiv);\n  }\n  \n  protected renderGame(): void {\n    this.renderScenario();\n  }\n  \n  protected checkAnswer(_userAnswer: string, _correctAnswer: string): boolean {\n    // Handled in handleAnswer\n    return false;\n  }\n  \n  protected handleAnswerFeedback(_isCorrect: boolean): void {\n    // Handled in showFeedback\n  }\n  \n  getInstructions(): string {\n    return \"Select the best possible 5-card poker hand from the 7 cards shown. Click cards to select them.\";\n  }\n}\n\n// Add styles\nexport function getBestFiveStyles(): string {\n  return `\n    .instructions {\n      text-align: center;\n      font-size: 1.2em;\n      color: #333;\n      margin-bottom: 30px;\n      font-weight: 600;\n    }\n    \n    .seven-cards {\n      display: flex;\n      justify-content: center;\n      gap: 10px;\n      margin: 30px 0;\n      flex-wrap: wrap;\n    }\n    \n    .seven-cards .card {\n      transition: all 0.3s;\n      cursor: pointer;\n    }\n    \n    .seven-cards .card:hover {\n      transform: translateY(-10px);\n    }\n    \n    .seven-cards .card.selected {\n      transform: translateY(-20px);\n      box-shadow: 0 10px 30px rgba(199, 62, 154, 0.4);\n      border-color: #C73E9A;\n      border-width: 3px;\n    }\n    \n    .seven-cards .card.correct-answer {\n      border-color: #4CAF50;\n      border-width: 4px;\n      box-shadow: 0 10px 30px rgba(76, 175, 80, 0.4);\n    }\n    \n    .selection-info {\n      text-align: center;\n      font-size: 1.1em;\n      margin: 20px 0;\n      color: #666;\n    }\n    \n    #cards-selected {\n      font-weight: bold;\n      color: #C73E9A;\n      font-size: 1.2em;\n    }\n    \n    .action-buttons {\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n      margin: 20px 0;\n    }\n    \n    .action-btn {\n      padding: 12px 30px;\n      font-size: 1.1em;\n      border-radius: 8px;\n      border: 2px solid;\n      cursor: pointer;\n      transition: all 0.3s;\n      font-weight: 600;\n    }\n    \n    .action-btn.primary {\n      background: #C73E9A;\n      color: white;\n      border-color: #C73E9A;\n    }\n    \n    .action-btn.primary:hover:not(:disabled) {\n      background: #932153;\n      border-color: #932153;\n      transform: translateY(-2px);\n    }\n    \n    .action-btn.primary:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n    \n    .action-btn.secondary {\n      background: white;\n      color: #666;\n      border-color: #ddd;\n    }\n    \n    .action-btn.secondary:hover {\n      background: #f5f5f5;\n      transform: translateY(-2px);\n    }\n    \n    .selected-hand {\n      text-align: center;\n      margin: 20px 0;\n      min-height: 50px;\n    }\n    \n    .selected-label {\n      color: #666;\n      font-size: 0.9em;\n      margin-bottom: 5px;\n    }\n    \n    .selected-hand-name {\n      font-size: 1.3em;\n      font-weight: bold;\n      color: #7D1346;\n    }\n    \n    .feedback {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: white;\n      padding: 30px;\n      border-radius: 15px;\n      box-shadow: 0 10px 40px rgba(0,0,0,0.3);\n      text-align: center;\n      z-index: 100;\n    }\n    \n    .feedback-icon {\n      font-size: 3em;\n      margin-bottom: 10px;\n    }\n    \n    .feedback.correct .feedback-icon {\n      color: #4CAF50;\n    }\n    \n    .feedback.incorrect .feedback-icon {\n      color: #F44336;\n    }\n    \n    .feedback-text {\n      font-size: 1.1em;\n      color: #333;\n    }\n    \n    @media (max-width: 768px) {\n      .seven-cards .card {\n        width: 60px !important;\n        height: 85px !important;\n      }\n    }\n  `;\n}"],"names":["BestFiveFromSeven","BaseGame","constructor","config","super","name","difficulty","rounds","timeLimit","description","instructions","this","containerId","scenarios","selectedCards","Set","generateScenarios","Random.setSeed","Random.getHourlySeed","i","scenario","attempts","sevenCards","Cards.generateDeck","shuffled","slice","bestHandResult","findBestHand","includes","id","allCards","bestHand","cards","handName","possibleHands","choices","correctAnswer","sort","join","explanation","push","renderScenario","state","currentRound","currentScenario","clear","container","gameArea","querySelector","document","createElement","className","appendChild","innerHTML","cardsContainer","getElementById","forEach","card","_index","cardEl","Cards.createCardElement","width","height","clickable","onClick","toggleCard","dataset","cardValue","clearBtn","submitBtn","addEventListener","clearSelection","submitSelection","has","delete","size","add","updateSelection","querySelectorAll","classList","remove","counter","textContent","toString","disabled","display","selectedArray","Array","from","getHandDescription","correctArray","isCorrect","handleAnswer","answerId","score","streak","showFeedback","setTimeout","isComplete","style","pointerEvents","btn","feedbackDiv","renderGame","checkAnswer","_userAnswer","_correctAnswer","handleAnswerFeedback","_isCorrect","getInstructions"],"mappings":"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"}