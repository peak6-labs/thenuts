import{B as e,a as n,g as t}from"./BaseGame-BVYw41mq.js";import{g as s,r as i}from"./main-BdMgXgLc.js";import{g as a,c as r}from"./pokersolver-wrapper-RbdFFWZ_.js";class o extends e{constructor(e={}){super({name:"Hand vs Hand",difficulty:"foundation",rounds:10,timeLimit:30,description:"Compare two poker hands and determine the winner",instructions:["Look at both hands","Determine which hand wins","Select your answer"],...e}),this.containerId="game-container",this.scenarios=[]}generateScenarios(){const e=[],i=new Set;n(t());for(let n=0;n<this.config.rounds;n++){let t=null,o=0;for(;!t&&o<50;){o++;const e=s({shuffled:!0}),d=e.slice(0,5),c=e.slice(5,10),h=a(d),l=a(c),u=`${h}-${l}`;if(i.has(u))continue;let m,p;i.add(u);const b=r(d,c);b>0?(m="hand1",p=`${h} beats ${l}`):b<0?(m="hand2",p=`${l} beats ${h}`):(m="tie",p=`Both hands are ${h} - it's a tie!`),t={id:`hvh-${n}`,hand1:d,hand2:c,winner:m,choices:[{id:"hand1",display:"Hand 1 wins"},{id:"hand2",display:"Hand 2 wins"},{id:"tie",display:"It's a tie"}],correctAnswer:m,explanation:p}}t&&e.push(t)}return this.scenarios=e,e}renderScenario(){const e=this.scenarios[this.state.currentRound||0];if(!e)return;this.currentScenario=e;const n=this.container;if(!n)return;let t=n.querySelector(".game-area");t||(t=document.createElement("div"),t.className="game-area",n.appendChild(t)),t.innerHTML='\n      <div class="hands-comparison">\n        <div class="hand-display">\n          <h3>Hand 1</h3>\n          <div class="cards-row" id="hand1-cards"></div>\n        </div>\n        \n        <div class="vs-divider">VS</div>\n        \n        <div class="hand-display">\n          <h3>Hand 2</h3>\n          <div class="cards-row" id="hand2-cards"></div>\n        </div>\n      </div>\n      \n      <div class="question">Which hand wins?</div>\n      \n      <div class="choice-buttons">\n        <button class="choice-btn" data-choice="hand1">Hand 1 Wins</button>\n        <button class="choice-btn" data-choice="tie">It\'s a Tie</button>\n        <button class="choice-btn" data-choice="hand2">Hand 2 Wins</button>\n      </div>\n    ',i(e.hand1,"hand1-cards",{width:90,height:130}),i(e.hand2,"hand2-cards",{width:90,height:130});t.querySelectorAll(".choice-btn").forEach(e=>{e.addEventListener("click",()=>{const n=e.getAttribute("data-choice");n&&this.handleAnswer(n)})})}handleAnswer(e){if(!this.currentScenario)return;const n=this.currentScenario,t=e===n?.winner;t?(this.state.score++,this.state.streak++):this.state.streak=0,this.showFeedback(t,e,n?.winner||"",this.currentScenario?.explanation||""),setTimeout(()=>{this.state.currentRound<this.config.rounds-1?(this.state.currentRound++,this.renderScenario()):this.state.isComplete=!0},3e3)}showFeedback(e,n,t,s){const i=document.querySelector(".game-area");if(!i)return;i.querySelectorAll(".choice-btn").forEach(s=>{const i=s;i.disabled=!0;const a=i.getAttribute("data-choice");a===t?(i.style.background="#4CAF50",i.style.color="white",i.style.borderColor="#4CAF50"):a!==n||e||(i.style.background="#F44336",i.style.color="white",i.style.borderColor="#F44336")});const a=document.createElement("div");a.className="result-message",a.style.cssText=`\n      text-align: center;\n      margin-top: 20px;\n      padding: 15px;\n      background: ${e?"#E8F5E9":"#FFEBEE"};\n      border-radius: 8px;\n      border: 2px solid ${e?"#4CAF50":"#F44336"};\n    `,a.innerHTML=`\n      <div style="font-size: 2em; margin-bottom: 10px;">${e?"✓ Correct!":"✗ Incorrect"}</div>\n      <div style="font-size: 1.1em; color: #333;">${s}</div>\n    `;const r=i.querySelector(".choice-buttons");r&&r.parentNode&&r.parentNode.insertBefore(a,r.nextSibling)}renderGame(){this.renderScenario()}checkAnswer(e,n){return!1}handleAnswerFeedback(e){}getInstructions(){return"Compare two poker hands and determine which one wins. Remember the hand rankings!"}}export{o as HandVsHand};
//# sourceMappingURL=HandVsHand-CMprz702.js.map
